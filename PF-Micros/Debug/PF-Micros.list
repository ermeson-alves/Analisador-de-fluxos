
PF-Micros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cdc  08002cdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002cdc  08002cdc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cdc  08002cdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08002d54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002d54  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0c4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001854  00000000  00000000  0002c15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc0d  00000000  00000000  0002ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8a3  00000000  00000000  0003eb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063ca3  00000000  00000000  0004b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af06b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000af0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bc4 	.word	0x08002bc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002bc4 	.word	0x08002bc4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b0aa      	sub	sp, #168	; 0xa8
 8000238:	af02      	add	r7, sp, #8
 800023a:	6078      	str	r0, [r7, #4]
	char message[146];

	int len = sprintf(message,"\r\nNos ultimos 10s:\r\nNumero de pessoas atualmente dentro do ambiente = %d\r\nNumero de pessoas que entraram = %d\r\nNumero de pessoas que sairam = %d\r\n"
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000242:	681c      	ldr	r4, [r3, #0]
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4910      	ldr	r1, [pc, #64]	; (800028c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800024a:	2508      	movs	r5, #8
 800024c:	1978      	adds	r0, r7, r5
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	0023      	movs	r3, r4
 8000252:	f002 f84d 	bl	80022f0 <siprintf>
 8000256:	0003      	movs	r3, r0
 8000258:	229c      	movs	r2, #156	; 0x9c
 800025a:	18ba      	adds	r2, r7, r2
 800025c:	6013      	str	r3, [r2, #0]
			"", numero_atual, numero_entraram, numero_sairam);

	HAL_UART_Transmit(&huart2,(uint8_t *) message,sizeof(message),100);// Sending in normal mode
 800025e:	1979      	adds	r1, r7, r5
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	2292      	movs	r2, #146	; 0x92
 8000266:	f001 fc67 	bl	8001b38 <HAL_UART_Transmit>

	numero_entraram = 0;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
	numero_sairam = 0;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b028      	add	sp, #160	; 0xa0
 800027c:	bdb0      	pop	{r4, r5, r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000160 	.word	0x20000160
 8000284:	20000158 	.word	0x20000158
 8000288:	2000015c 	.word	0x2000015c
 800028c:	08002bdc 	.word	0x08002bdc
 8000290:	200000d4 	.word	0x200000d4

08000294 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fa4c 	bl	8000734 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f842 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8da 	bl	8000458 <MX_GPIO_Init>
  MX_TIM16_Init();
 80002a4:	f000 f87e 	bl	80003a4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80002a8:	f000 f8a6 	bl	80003f8 <MX_USART2_UART_Init>


  HAL_TIM_Base_Start_IT(&htim16);
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <main+0x80>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 f9f6 	bl	80016a0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	/* */

	  /* ENTRADA DE PESSOAS */
      if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2101      	movs	r1, #1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fd10 	bl	8000ce0 <HAL_GPIO_ReadPin>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d10e      	bne.n	80002e2 <main+0x4e>
    	  numero_entraram++;
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <main+0x84>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <main+0x84>)
 80002cc:	601a      	str	r2, [r3, #0]
    	  numero_atual++;
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <main+0x88>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <main+0x88>)
 80002d6:	601a      	str	r2, [r3, #0]
    	  HAL_Delay(1000);
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fa8d 	bl	80007fc <HAL_Delay>
      }

      if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2102      	movs	r1, #2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fcf9 	bl	8000ce0 <HAL_GPIO_ReadPin>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d1e0      	bne.n	80002b4 <main+0x20>
          numero_sairam++;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <main+0x8c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <main+0x8c>)
 80002fa:	601a      	str	r2, [r3, #0]
          numero_atual--;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <main+0x88>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1e5a      	subs	r2, r3, #1
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <main+0x88>)
 8000304:	601a      	str	r2, [r3, #0]
          HAL_Delay(1000);
 8000306:	23fa      	movs	r3, #250	; 0xfa
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fa76 	bl	80007fc <HAL_Delay>
      if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000310:	e7d0      	b.n	80002b4 <main+0x20>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	2000008c 	.word	0x2000008c
 8000318:	20000158 	.word	0x20000158
 800031c:	20000160 	.word	0x20000160
 8000320:	2000015c 	.word	0x2000015c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b091      	sub	sp, #68	; 0x44
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	2410      	movs	r4, #16
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2330      	movs	r3, #48	; 0x30
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f001 ffd3 	bl	80022e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	2310      	movs	r3, #16
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f001 ffcc 	bl	80022e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	0021      	movs	r1, r4
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2201      	movs	r2, #1
 8000354:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2210      	movs	r2, #16
 800035a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	187b      	adds	r3, r7, r1
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fcd9 	bl	8000d1c <HAL_RCC_OscConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800036e:	f000 f8a1 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	003b      	movs	r3, r7
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038a:	003b      	movs	r3, r7
 800038c:	2100      	movs	r1, #0
 800038e:	0018      	movs	r0, r3
 8000390:	f000 ffe2 	bl	8001358 <HAL_RCC_ClockConfig>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000398:	f000 f88c 	bl	80004b4 <Error_Handler>
  }
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b011      	add	sp, #68	; 0x44
 80003a2:	bd90      	pop	{r4, r7, pc}

080003a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003aa:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_TIM16_Init+0x48>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47999;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <MX_TIM16_Init+0x4c>)
 80003b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1667;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <MX_TIM16_Init+0x50>)
 80003be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 f913 	bl	8001600 <HAL_TIM_Base_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80003de:	f000 f869 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	40014400 	.word	0x40014400
 80003f0:	0000bb7f 	.word	0x0000bb7f
 80003f4:	00000683 	.word	0x00000683

080003f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_USART2_UART_Init+0x58>)
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <MX_USART2_UART_Init+0x5c>)
 8000400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000404:	2296      	movs	r2, #150	; 0x96
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fb27 	bl	8001a90 <HAL_UART_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000446:	f000 f835 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000d4 	.word	0x200000d4
 8000454:	40004400 	.word	0x40004400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f001 ff3a 	bl	80022e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_GPIO_Init+0x58>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	0289      	lsls	r1, r1, #10
 8000476:	430a      	orrs	r2, r1
 8000478:	615a      	str	r2, [r3, #20]
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <MX_GPIO_Init+0x58>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	2380      	movs	r3, #128	; 0x80
 8000480:	029b      	lsls	r3, r3, #10
 8000482:	4013      	ands	r3, r2
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2203      	movs	r2, #3
 800048c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	1d3a      	adds	r2, r7, #4
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 faac 	bl	8000a00 <HAL_GPIO_Init>

}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b006      	add	sp, #24
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x44>)
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_MspInit+0x44>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	619a      	str	r2, [r3, #24]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <HAL_MspInit+0x44>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_MspInit+0x44>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0549      	lsls	r1, r1, #21
 80004e8:	430a      	orrs	r2, r1
 80004ea:	61da      	str	r2, [r3, #28]
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_MspInit+0x44>)
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	055b      	lsls	r3, r3, #21
 80004f4:	4013      	ands	r3, r2
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_TIM_Base_MspInit+0x48>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d115      	bne.n	8000546 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_TIM_Base_MspInit+0x4c>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <HAL_TIM_Base_MspInit+0x4c>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0289      	lsls	r1, r1, #10
 8000524:	430a      	orrs	r2, r1
 8000526:	619a      	str	r2, [r3, #24]
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_Base_MspInit+0x4c>)
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	029b      	lsls	r3, r3, #10
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2015      	movs	r0, #21
 800053c:	f000 fa2e 	bl	800099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000540:	2015      	movs	r0, #21
 8000542:	f000 fa40 	bl	80009c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40014400 	.word	0x40014400
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08b      	sub	sp, #44	; 0x2c
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2414      	movs	r4, #20
 8000562:	193b      	adds	r3, r7, r4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 feb8 	bl	80022e0 <memset>
  if(huart->Instance==USART2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d132      	bne.n	80005e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <HAL_UART_MspInit+0x94>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_UART_MspInit+0x94>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_UART_MspInit+0x94>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_UART_MspInit+0x94>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_UART_MspInit+0x94>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0289      	lsls	r1, r1, #10
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_UART_MspInit+0x94>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	029b      	lsls	r3, r3, #10
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2203      	movs	r2, #3
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fa10 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b00b      	add	sp, #44	; 0x2c
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40004400 	.word	0x40004400
 80005ec:	40021000 	.word	0x40021000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000614:	f000 f8d6 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <TIM16_IRQHandler+0x14>)
 8000626:	0018      	movs	r0, r3
 8000628:	f001 f880 	bl	800172c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	2000008c 	.word	0x2000008c

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f001 fe10 	bl	800228c <__errno>
 800066c:	0003      	movs	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	2301      	movs	r3, #1
 8000674:	425b      	negs	r3, r3
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	18d2      	adds	r2, r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b006      	add	sp, #24
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20001800 	.word	0x20001800
 8000698:	00000400 	.word	0x00000400
 800069c:	20000164 	.word	0x20000164
 80006a0:	20000180 	.word	0x20000180

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <LoopForever+0x6>)
    LDR R1, [R0]
 80006b6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006b8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <LoopForever+0xa>)
    CMP R1, R2
 80006bc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006be:	d105      	bne.n	80006cc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006c2:	4913      	ldr	r1, [pc, #76]	; (8000710 <LoopForever+0x12>)
    STR R1, [R0]
 80006c4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006c8:	4913      	ldr	r1, [pc, #76]	; (8000718 <LoopForever+0x1a>)
    STR R1, [R0]
 80006ca:	6001      	str	r1, [r0, #0]

080006cc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <LoopForever+0x1e>)
  ldr r1, =_edata
 80006ce:	4914      	ldr	r1, [pc, #80]	; (8000720 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <LoopForever+0x26>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006e4:	4c11      	ldr	r4, [pc, #68]	; (800072c <LoopForever+0x2e>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f2:	f7ff ffd7 	bl	80006a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006f6:	f001 fdcf 	bl	8002298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fdcb 	bl	8000294 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000704:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000708:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800070c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000710:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000714:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000718:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000724:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 8000728:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800072c:	2000017c 	.word	0x2000017c

08000730 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_IRQHandler>
	...

08000734 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_Init+0x24>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_Init+0x24>)
 800073e:	2110      	movs	r1, #16
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f809 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074a:	f7ff feb9 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_InitTick+0x5c>)
 8000766:	681c      	ldr	r4, [r3, #0]
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_InitTick+0x60>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	0019      	movs	r1, r3
 800076e:	23fa      	movs	r3, #250	; 0xfa
 8000770:	0098      	lsls	r0, r3, #2
 8000772:	f7ff fcd3 	bl	800011c <__udivsi3>
 8000776:	0003      	movs	r3, r0
 8000778:	0019      	movs	r1, r3
 800077a:	0020      	movs	r0, r4
 800077c:	f7ff fcce 	bl	800011c <__udivsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f92f 	bl	80009e6 <HAL_SYSTICK_Config>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e00f      	b.n	80007b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d80b      	bhi.n	80007ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f8fc 	bl	800099c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_InitTick+0x64>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b003      	add	sp, #12
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	18d2      	adds	r2, r2, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000168 	.word	0x20000168

080007e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000168 	.word	0x20000168

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	0003      	movs	r3, r0
 800080a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	001a      	movs	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	189b      	adds	r3, r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	0002      	movs	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b004      	add	sp, #16
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b7f      	cmp	r3, #127	; 0x7f
 8000856:	d809      	bhi.n	800086c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	231f      	movs	r3, #31
 8000860:	401a      	ands	r2, r3
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_EnableIRQ+0x30>)
 8000864:	2101      	movs	r1, #1
 8000866:	4091      	lsls	r1, r2
 8000868:	000a      	movs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	; 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	429a      	cmp	r2, r3
 8000966:	d301      	bcc.n	800096c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000968:	2301      	movs	r3, #1
 800096a:	e010      	b.n	800098e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SysTick_Config+0x44>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	3a01      	subs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff7c 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x44>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	0002      	movs	r2, r0
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff ff33 	bl	8000844 <__NVIC_EnableIRQ>
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ffaf 	bl	8000954 <SysTick_Config>
 80009f6:	0003      	movs	r3, r0
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e14f      	b.n	8000cb0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d100      	bne.n	8000a28 <HAL_GPIO_Init+0x28>
 8000a26:	e140      	b.n	8000caa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	0013      	movs	r3, r2
 8000a50:	43da      	mvns	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	409a      	lsls	r2, r3
 8000a62:	0013      	movs	r3, r2
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d123      	bne.n	8000b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	08da      	lsrs	r2, r3, #3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3208      	adds	r2, #8
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	58d3      	ldr	r3, [r2, r3]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2207      	movs	r2, #7
 8000afc:	4013      	ands	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2107      	movs	r1, #7
 8000b16:	400b      	ands	r3, r1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	6939      	ldr	r1, [r7, #16]
 8000b30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	2203      	movs	r2, #3
 8000b50:	401a      	ands	r2, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	23c0      	movs	r3, #192	; 0xc0
 8000b6c:	029b      	lsls	r3, r3, #10
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d100      	bne.n	8000b74 <HAL_GPIO_Init+0x174>
 8000b72:	e09a      	b.n	8000caa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000b76:	699a      	ldr	r2, [r3, #24]
 8000b78:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	2201      	movs	r2, #1
 8000b86:	4013      	ands	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	589b      	ldr	r3, [r3, r2]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	2390      	movs	r3, #144	; 0x90
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0x1e2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a44      	ldr	r2, [pc, #272]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <HAL_GPIO_Init+0x1de>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a43      	ldr	r2, [pc, #268]	; (8000cd4 <HAL_GPIO_Init+0x2d4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x1da>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a42      	ldr	r2, [pc, #264]	; (8000cd8 <HAL_GPIO_Init+0x2d8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_GPIO_Init+0x1d6>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e004      	b.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000be2:	2300      	movs	r3, #0
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	2103      	movs	r1, #3
 8000be8:	400a      	ands	r2, r1
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4093      	lsls	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf4:	4935      	ldr	r1, [pc, #212]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c02:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	035b      	lsls	r3, r3, #13
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	039b      	lsls	r3, r3, #14
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	40da      	lsrs	r2, r3
 8000cb8:	1e13      	subs	r3, r2, #0
 8000cba:	d000      	beq.n	8000cbe <HAL_GPIO_Init+0x2be>
 8000cbc:	e6a8      	b.n	8000a10 <HAL_GPIO_Init+0x10>
  } 
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b006      	add	sp, #24
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	000a      	movs	r2, r1
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	1cba      	adds	r2, r7, #2
 8000cf4:	8812      	ldrh	r2, [r2, #0]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d004      	beq.n	8000d04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e003      	b.n	8000d0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
  }
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e305      	b.n	800133a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	d100      	bne.n	8000d3a <HAL_RCC_OscConfig+0x1e>
 8000d38:	e08d      	b.n	8000e56 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3a:	4bc5      	ldr	r3, [pc, #788]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	220c      	movs	r2, #12
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d00e      	beq.n	8000d64 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d46:	4bc2      	ldr	r3, [pc, #776]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d116      	bne.n	8000d80 <HAL_RCC_OscConfig+0x64>
 8000d52:	4bbf      	ldr	r3, [pc, #764]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	025b      	lsls	r3, r3, #9
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	025b      	lsls	r3, r3, #9
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d10d      	bne.n	8000d80 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	4bba      	ldr	r3, [pc, #744]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d100      	bne.n	8000d72 <HAL_RCC_OscConfig+0x56>
 8000d70:	e070      	b.n	8000e54 <HAL_RCC_OscConfig+0x138>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d000      	beq.n	8000d7c <HAL_RCC_OscConfig+0x60>
 8000d7a:	e06b      	b.n	8000e54 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e2dc      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d107      	bne.n	8000d98 <HAL_RCC_OscConfig+0x7c>
 8000d88:	4bb1      	ldr	r3, [pc, #708]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4bb0      	ldr	r3, [pc, #704]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e02f      	b.n	8000df8 <HAL_RCC_OscConfig+0xdc>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10c      	bne.n	8000dba <HAL_RCC_OscConfig+0x9e>
 8000da0:	4bab      	ldr	r3, [pc, #684]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4baa      	ldr	r3, [pc, #680]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000da6:	49ab      	ldr	r1, [pc, #684]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000da8:	400a      	ands	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4ba7      	ldr	r3, [pc, #668]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000db2:	49a9      	ldr	r1, [pc, #676]	; (8001058 <HAL_RCC_OscConfig+0x33c>)
 8000db4:	400a      	ands	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e01e      	b.n	8000df8 <HAL_RCC_OscConfig+0xdc>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d10e      	bne.n	8000de0 <HAL_RCC_OscConfig+0xc4>
 8000dc2:	4ba3      	ldr	r3, [pc, #652]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4ba2      	ldr	r3, [pc, #648]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	02c9      	lsls	r1, r1, #11
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	4b9f      	ldr	r3, [pc, #636]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b9e      	ldr	r3, [pc, #632]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e00b      	b.n	8000df8 <HAL_RCC_OscConfig+0xdc>
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b9a      	ldr	r3, [pc, #616]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000de6:	499b      	ldr	r1, [pc, #620]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4b98      	ldr	r3, [pc, #608]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b97      	ldr	r3, [pc, #604]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000df2:	4999      	ldr	r1, [pc, #612]	; (8001058 <HAL_RCC_OscConfig+0x33c>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d014      	beq.n	8000e2a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fcf2 	bl	80007e8 <HAL_GetTick>
 8000e04:	0003      	movs	r3, r0
 8000e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fced 	bl	80007e8 <HAL_GetTick>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e28e      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	4013      	ands	r3, r2
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0xee>
 8000e28:	e015      	b.n	8000e56 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fcdd 	bl	80007e8 <HAL_GetTick>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fcd8 	bl	80007e8 <HAL_GetTick>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e279      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e46:	4b82      	ldr	r3, [pc, #520]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_OscConfig+0x118>
 8000e52:	e000      	b.n	8000e56 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d100      	bne.n	8000e62 <HAL_RCC_OscConfig+0x146>
 8000e60:	e06c      	b.n	8000f3c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e62:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	220c      	movs	r2, #12
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d00e      	beq.n	8000e8a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e6c:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	220c      	movs	r2, #12
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d11f      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x19c>
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	23c0      	movs	r3, #192	; 0xc0
 8000e7e:	025b      	lsls	r3, r3, #9
 8000e80:	401a      	ands	r2, r3
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d116      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8a:	4b71      	ldr	r3, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x184>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e24c      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	22f8      	movs	r2, #248	; 0xf8
 8000ea6:	4393      	bics	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	00da      	lsls	r2, r3, #3
 8000eb0:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	e041      	b.n	8000f3c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d024      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec0:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b62      	ldr	r3, [pc, #392]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc8c 	bl	80007e8 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fc87 	bl	80007e8 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e228      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	4b59      	ldr	r3, [pc, #356]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2202      	movs	r2, #2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d0f1      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	22f8      	movs	r2, #248	; 0xf8
 8000ef8:	4393      	bics	r3, r2
 8000efa:	0019      	movs	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	00da      	lsls	r2, r3, #3
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e018      	b.n	8000f3c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b50      	ldr	r3, [pc, #320]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	438a      	bics	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fc67 	bl	80007e8 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc62 	bl	80007e8 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e203      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f1      	bne.n	8000f20 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2208      	movs	r2, #8
 8000f42:	4013      	ands	r3, r2
 8000f44:	d036      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d019      	beq.n	8000f82 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fc45 	bl	80007e8 <HAL_GetTick>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc40 	bl	80007e8 <HAL_GetTick>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1e1      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d0f1      	beq.n	8000f64 <HAL_RCC_OscConfig+0x248>
 8000f80:	e018      	b.n	8000fb4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fc2b 	bl	80007e8 <HAL_GetTick>
 8000f92:	0003      	movs	r3, r0
 8000f94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fc26 	bl	80007e8 <HAL_GetTick>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1c7      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d1f1      	bne.n	8000f98 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d100      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2a4>
 8000fbe:	e0b5      	b.n	800112c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc0:	201f      	movs	r0, #31
 8000fc2:	183b      	adds	r3, r7, r0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	055b      	lsls	r3, r3, #21
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d110      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000fd6:	69da      	ldr	r2, [r3, #28]
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	0549      	lsls	r1, r1, #21
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	61da      	str	r2, [r3, #28]
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	055b      	lsls	r3, r3, #21
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_RCC_OscConfig+0x340>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	d11a      	bne.n	8001038 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_RCC_OscConfig+0x340>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_RCC_OscConfig+0x340>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0049      	lsls	r1, r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001010:	f7ff fbea 	bl	80007e8 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101a:	f7ff fbe5 	bl	80007e8 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b64      	cmp	r3, #100	; 0x64
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e186      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_OscConfig+0x340>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4013      	ands	r3, r2
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10f      	bne.n	8001060 <HAL_RCC_OscConfig+0x344>
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_RCC_OscConfig+0x334>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	e036      	b.n	80010bc <HAL_RCC_OscConfig+0x3a0>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40021000 	.word	0x40021000
 8001054:	fffeffff 	.word	0xfffeffff
 8001058:	fffbffff 	.word	0xfffbffff
 800105c:	40007000 	.word	0x40007000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10c      	bne.n	8001082 <HAL_RCC_OscConfig+0x366>
 8001068:	4bb6      	ldr	r3, [pc, #728]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800106e:	2101      	movs	r1, #1
 8001070:	438a      	bics	r2, r1
 8001072:	621a      	str	r2, [r3, #32]
 8001074:	4bb3      	ldr	r3, [pc, #716]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	4bb2      	ldr	r3, [pc, #712]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800107a:	2104      	movs	r1, #4
 800107c:	438a      	bics	r2, r1
 800107e:	621a      	str	r2, [r3, #32]
 8001080:	e01c      	b.n	80010bc <HAL_RCC_OscConfig+0x3a0>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x388>
 800108a:	4bae      	ldr	r3, [pc, #696]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001090:	2104      	movs	r1, #4
 8001092:	430a      	orrs	r2, r1
 8001094:	621a      	str	r2, [r3, #32]
 8001096:	4bab      	ldr	r3, [pc, #684]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	4baa      	ldr	r3, [pc, #680]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	621a      	str	r2, [r3, #32]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0x3a0>
 80010a4:	4ba7      	ldr	r3, [pc, #668]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	438a      	bics	r2, r1
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	4ba4      	ldr	r3, [pc, #656]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4ba3      	ldr	r3, [pc, #652]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fb90 	bl	80007e8 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e009      	b.n	80010e2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fb8b 	bl	80007e8 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	4a9b      	ldr	r2, [pc, #620]	; (8001348 <HAL_RCC_OscConfig+0x62c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e12b      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	4b98      	ldr	r3, [pc, #608]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x3b2>
 80010ec:	e013      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb7b 	bl	80007e8 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f6:	e009      	b.n	800110c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f8:	f7ff fb76 	bl	80007e8 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a91      	ldr	r2, [pc, #580]	; (8001348 <HAL_RCC_OscConfig+0x62c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e116      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	4b8d      	ldr	r3, [pc, #564]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001116:	231f      	movs	r3, #31
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	4b87      	ldr	r3, [pc, #540]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001126:	4989      	ldr	r1, [pc, #548]	; (800134c <HAL_RCC_OscConfig+0x630>)
 8001128:	400a      	ands	r2, r1
 800112a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2210      	movs	r2, #16
 8001132:	4013      	ands	r3, r2
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12a      	bne.n	8001194 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800113e:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	4b80      	ldr	r3, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001144:	2104      	movs	r1, #4
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800114a:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800114c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114e:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fb47 	bl	80007e8 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001160:	f7ff fb42 	bl	80007e8 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e0e3      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d0f1      	beq.n	8001160 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	22f8      	movs	r2, #248	; 0xf8
 8001182:	4393      	bics	r3, r2
 8001184:	0019      	movs	r1, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	00da      	lsls	r2, r3, #3
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e034      	b.n	80011fe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	3305      	adds	r3, #5
 800119a:	d111      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800119e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011a2:	2104      	movs	r1, #4
 80011a4:	438a      	bics	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ac:	22f8      	movs	r2, #248	; 0xf8
 80011ae:	4393      	bics	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	00da      	lsls	r2, r3, #3
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c4:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011c6:	2104      	movs	r1, #4
 80011c8:	430a      	orrs	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	438a      	bics	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fb06 	bl	80007e8 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e2:	f7ff fb01 	bl	80007e8 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0a2      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f1      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x4ec>
 8001206:	e097      	b.n	8001338 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001208:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	220c      	movs	r2, #12
 800120e:	4013      	ands	r3, r2
 8001210:	2b08      	cmp	r3, #8
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x4fa>
 8001214:	e06b      	b.n	80012ee <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d14c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001224:	494a      	ldr	r1, [pc, #296]	; (8001350 <HAL_RCC_OscConfig+0x634>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fadd 	bl	80007e8 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fad8 	bl	80007e8 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e079      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	049b      	lsls	r3, r3, #18
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	220f      	movs	r2, #15
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001262:	430a      	orrs	r2, r1
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <HAL_RCC_OscConfig+0x638>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	431a      	orrs	r2, r3
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0449      	lsls	r1, r1, #17
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff faab 	bl	80007e8 <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff faa6 	bl	80007e8 <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e047      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	049b      	lsls	r3, r3, #18
 80012b2:	4013      	ands	r3, r2
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x57c>
 80012b6:	e03f      	b.n	8001338 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80012be:	4924      	ldr	r1, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x634>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fa90 	bl	80007e8 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fa8b 	bl	80007e8 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e02c      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	049b      	lsls	r3, r3, #18
 80012e8:	4013      	ands	r3, r2
 80012ea:	d1f0      	bne.n	80012ce <HAL_RCC_OscConfig+0x5b2>
 80012ec:	e024      	b.n	8001338 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e01f      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x628>)
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	23c0      	movs	r3, #192	; 0xc0
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	401a      	ands	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	429a      	cmp	r2, r3
 8001314:	d10e      	bne.n	8001334 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	220f      	movs	r2, #15
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	23f0      	movs	r3, #240	; 0xf0
 8001328:	039b      	lsls	r3, r3, #14
 800132a:	401a      	ands	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b008      	add	sp, #32
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000
 8001348:	00001388 	.word	0x00001388
 800134c:	efffffff 	.word	0xefffffff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	ffc27fff 	.word	0xffc27fff

08001358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b3      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	4013      	ands	r3, r2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d911      	bls.n	800139e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4393      	bics	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e09a      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d015      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d006      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013b2:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	21e0      	movs	r1, #224	; 0xe0
 80013ba:	00c9      	lsls	r1, r1, #3
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	22f0      	movs	r2, #240	; 0xf0
 80013c6:	4393      	bics	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d114      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06e      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	049b      	lsls	r3, r3, #18
 8001406:	4013      	ands	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e062      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e05b      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	4393      	bics	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff f9da 	bl	80007e8 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001438:	e009      	b.n	800144e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143a:	f7ff f9d5 	bl	80007e8 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_RCC_ClockConfig+0x18c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e042      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	220c      	movs	r2, #12
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1ec      	bne.n	800143a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d211      	bcs.n	8001492 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	4393      	bics	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e020      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2204      	movs	r2, #4
 8001498:	4013      	ands	r3, r2
 800149a:	d009      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_RCC_ClockConfig+0x190>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014b0:	f000 f820 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80014b4:	0001      	movs	r1, r0
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	220f      	movs	r2, #15
 80014be:	4013      	ands	r3, r2
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x194>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	000a      	movs	r2, r1
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x198>)
 80014ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f7ff f945 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	00001388 	.word	0x00001388
 80014e8:	fffff8ff 	.word	0xfffff8ff
 80014ec:	08002c90 	.word	0x08002c90
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b08f      	sub	sp, #60	; 0x3c
 80014f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014fa:	2314      	movs	r3, #20
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001500:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001502:	c313      	stmia	r3!, {r0, r1, r4}
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800150c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800150e:	c313      	stmia	r3!, {r0, r1, r4}
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b04      	cmp	r3, #4
 8001536:	d002      	beq.n	800153e <HAL_RCC_GetSysClockFreq+0x4a>
 8001538:	2b08      	cmp	r3, #8
 800153a:	d003      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x50>
 800153c:	e02f      	b.n	800159e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001542:	e02f      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	220f      	movs	r2, #15
 800154a:	4013      	ands	r3, r2
 800154c:	2214      	movs	r2, #20
 800154e:	18ba      	adds	r2, r7, r2
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	220f      	movs	r2, #15
 800155a:	4013      	ands	r3, r2
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	401a      	ands	r2, r3
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	025b      	lsls	r3, r3, #9
 800156e:	429a      	cmp	r2, r3
 8001570:	d109      	bne.n	8001586 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001576:	f7fe fdd1 	bl	800011c <__udivsi3>
 800157a:	0003      	movs	r3, r0
 800157c:	001a      	movs	r2, r3
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	4353      	muls	r3, r2
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
 8001584:	e008      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800158a:	f7fe fdc7 	bl	800011c <__udivsi3>
 800158e:	0003      	movs	r3, r0
 8001590:	001a      	movs	r2, r3
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	4353      	muls	r3, r2
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800159c:	e002      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b00f      	add	sp, #60	; 0x3c
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	08002c70 	.word	0x08002c70
 80015b4:	08002c80 	.word	0x08002c80
 80015b8:	40021000 	.word	0x40021000
 80015bc:	007a1200 	.word	0x007a1200

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20000000 	.word	0x20000000

080015d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015d8:	f7ff fff2 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80015dc:	0001      	movs	r1, r0
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	2207      	movs	r2, #7
 80015e6:	4013      	ands	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	000b      	movs	r3, r1
}    
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08002ca0 	.word	0x08002ca0

08001600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e042      	b.n	8001698 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	223d      	movs	r2, #61	; 0x3d
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223c      	movs	r2, #60	; 0x3c
 8001622:	2100      	movs	r1, #0
 8001624:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe ff6d 	bl	8000508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	223d      	movs	r2, #61	; 0x3d
 8001632:	2102      	movs	r1, #2
 8001634:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f000 f9a9 	bl	8001998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2246      	movs	r2, #70	; 0x46
 800164a:	2101      	movs	r1, #1
 800164c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	223e      	movs	r2, #62	; 0x3e
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223f      	movs	r2, #63	; 0x3f
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2241      	movs	r2, #65	; 0x41
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2242      	movs	r2, #66	; 0x42
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2243      	movs	r2, #67	; 0x43
 800167a:	2101      	movs	r1, #1
 800167c:	5499      	strb	r1, [r3, r2]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2244      	movs	r2, #68	; 0x44
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2245      	movs	r2, #69	; 0x45
 800168a:	2101      	movs	r1, #1
 800168c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	223d      	movs	r2, #61	; 0x3d
 8001692:	2101      	movs	r1, #1
 8001694:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	223d      	movs	r2, #61	; 0x3d
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d001      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e030      	b.n	800171a <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	223d      	movs	r2, #61	; 0x3d
 80016bc:	2102      	movs	r1, #2
 80016be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <HAL_TIM_Base_Start_IT+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d004      	beq.n	80016e4 <HAL_TIM_Base_Start_IT+0x44>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_TIM_Base_Start_IT+0x88>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d111      	bne.n	8001708 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2207      	movs	r2, #7
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d010      	beq.n	8001718 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001706:	e007      	b.n	8001718 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40000400 	.word	0x40000400

0800172c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d124      	bne.n	800178c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	2b02      	cmp	r3, #2
 800174e:	d11d      	bne.n	800178c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2203      	movs	r2, #3
 8001756:	4252      	negs	r2, r2
 8001758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2203      	movs	r2, #3
 8001768:	4013      	ands	r3, r2
 800176a:	d004      	beq.n	8001776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f8fa 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8001774:	e007      	b.n	8001786 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0018      	movs	r0, r3
 800177a:	f000 f8ed 	bl	8001958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0018      	movs	r0, r3
 8001782:	f000 f8f9 	bl	8001978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	2b04      	cmp	r3, #4
 8001798:	d125      	bne.n	80017e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2204      	movs	r2, #4
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11e      	bne.n	80017e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2205      	movs	r2, #5
 80017ae:	4252      	negs	r2, r2
 80017b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d004      	beq.n	80017d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 f8cd 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 80017ce:	e007      	b.n	80017e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f8c0 	bl	8001958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f8cc 	bl	8001978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2208      	movs	r2, #8
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d124      	bne.n	800183e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2208      	movs	r2, #8
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11d      	bne.n	800183e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2209      	movs	r2, #9
 8001808:	4252      	negs	r2, r2
 800180a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2203      	movs	r2, #3
 800181a:	4013      	ands	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f8a1 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8001826:	e007      	b.n	8001838 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f894 	bl	8001958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0018      	movs	r0, r3
 8001834:	f000 f8a0 	bl	8001978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2210      	movs	r2, #16
 8001846:	4013      	ands	r3, r2
 8001848:	2b10      	cmp	r3, #16
 800184a:	d125      	bne.n	8001898 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2210      	movs	r2, #16
 8001854:	4013      	ands	r3, r2
 8001856:	2b10      	cmp	r3, #16
 8001858:	d11e      	bne.n	8001898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2211      	movs	r2, #17
 8001860:	4252      	negs	r2, r2
 8001862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2208      	movs	r2, #8
 8001868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d004      	beq.n	8001882 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f874 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8001880:	e007      	b.n	8001892 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f867 	bl	8001958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f000 f873 	bl	8001978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10f      	bne.n	80018c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4252      	negs	r2, r2
 80018bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7fe fcb7 	bl	8000234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d10f      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	4013      	ands	r3, r2
 80018de:	2b80      	cmp	r3, #128	; 0x80
 80018e0:	d108      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2281      	movs	r2, #129	; 0x81
 80018e8:	4252      	negs	r2, r2
 80018ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f8c6 	bl	8001a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b40      	cmp	r3, #64	; 0x40
 8001900:	d10f      	bne.n	8001922 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2240      	movs	r2, #64	; 0x40
 800190a:	4013      	ands	r3, r2
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d108      	bne.n	8001922 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	4252      	negs	r2, r2
 8001918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f000 f833 	bl	8001988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2220      	movs	r2, #32
 800192a:	4013      	ands	r3, r2
 800192c:	2b20      	cmp	r3, #32
 800192e:	d10f      	bne.n	8001950 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	4013      	ands	r3, r2
 800193a:	2b20      	cmp	r3, #32
 800193c:	d108      	bne.n	8001950 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2221      	movs	r2, #33	; 0x21
 8001944:	4252      	negs	r2, r2
 8001946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f890 	bl	8001a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <TIM_Base_SetConfig+0xc0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d003      	beq.n	80019b8 <TIM_Base_SetConfig+0x20>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <TIM_Base_SetConfig+0xc4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2270      	movs	r2, #112	; 0x70
 80019bc:	4393      	bics	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <TIM_Base_SetConfig+0xc0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00f      	beq.n	80019f2 <TIM_Base_SetConfig+0x5a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <TIM_Base_SetConfig+0xc4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x5a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <TIM_Base_SetConfig+0xc8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x5a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <TIM_Base_SetConfig+0xcc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x5a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <TIM_Base_SetConfig+0xd0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <TIM_Base_SetConfig+0xd4>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	4393      	bics	r3, r2
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <TIM_Base_SetConfig+0xc0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <TIM_Base_SetConfig+0xaa>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <TIM_Base_SetConfig+0xcc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d003      	beq.n	8001a42 <TIM_Base_SetConfig+0xaa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <TIM_Base_SetConfig+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d103      	bne.n	8001a4a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	615a      	str	r2, [r3, #20]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40002000 	.word	0x40002000
 8001a64:	40014400 	.word	0x40014400
 8001a68:	40014800 	.word	0x40014800
 8001a6c:	fffffcff 	.word	0xfffffcff

08001a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e044      	b.n	8001b2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2274      	movs	r2, #116	; 0x74
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe fd4f 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2224      	movs	r2, #36	; 0x24
 8001abe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 f8da 	bl	8001c8c <UART_SetConfig>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e024      	b.n	8001b2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fa0d 	bl	8001f0c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <HAL_UART_Init+0xa4>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	438a      	bics	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 faa5 	bl	8002074 <UART_CheckIdleState>
 8001b2a:	0003      	movs	r3, r0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	fffff7ff 	.word	0xfffff7ff

08001b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	1dbb      	adds	r3, r7, #6
 8001b46:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d000      	beq.n	8001b52 <HAL_UART_Transmit+0x1a>
 8001b50:	e096      	b.n	8001c80 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_UART_Transmit+0x28>
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e08e      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d109      	bne.n	8001b84 <HAL_UART_Transmit+0x4c>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e07e      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2274      	movs	r2, #116	; 0x74
 8001b88:	5c9b      	ldrb	r3, [r3, r2]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Transmit+0x5a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e077      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2274      	movs	r2, #116	; 0x74
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2221      	movs	r2, #33	; 0x21
 8001ba6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fe1e 	bl	80007e8 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1dba      	adds	r2, r7, #6
 8001bb4:	2150      	movs	r1, #80	; 0x50
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1dba      	adds	r2, r7, #6
 8001bbe:	2152      	movs	r1, #82	; 0x52
 8001bc0:	8812      	ldrh	r2, [r2, #0]
 8001bc2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d108      	bne.n	8001be2 <HAL_UART_Transmit+0xaa>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	e003      	b.n	8001bea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2274      	movs	r2, #116	; 0x74
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001bf2:	e02d      	b.n	8001c50 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	f000 fa7f 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e039      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10b      	bne.n	8001c2c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	05d2      	lsls	r2, r2, #23
 8001c1e:	0dd2      	lsrs	r2, r2, #23
 8001c20:	b292      	uxth	r2, r2
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3302      	adds	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	e008      	b.n	8001c3e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b292      	uxth	r2, r2
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2252      	movs	r2, #82	; 0x52
 8001c42:	5a9b      	ldrh	r3, [r3, r2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2252      	movs	r2, #82	; 0x52
 8001c4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2252      	movs	r2, #82	; 0x52
 8001c54:	5a9b      	ldrh	r3, [r3, r2]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1cb      	bne.n	8001bf4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	0013      	movs	r3, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	2140      	movs	r1, #64	; 0x40
 8001c6a:	f000 fa4b 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e005      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b008      	add	sp, #32
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c94:	231e      	movs	r3, #30
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a8d      	ldr	r2, [pc, #564]	; (8001ef0 <UART_SetConfig+0x264>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a88      	ldr	r2, [pc, #544]	; (8001ef4 <UART_SetConfig+0x268>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	; (8001ef8 <UART_SetConfig+0x26c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a7b      	ldr	r2, [pc, #492]	; (8001efc <UART_SetConfig+0x270>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d127      	bne.n	8001d62 <UART_SetConfig+0xd6>
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <UART_SetConfig+0x274>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d00d      	beq.n	8001d3a <UART_SetConfig+0xae>
 8001d1e:	d81b      	bhi.n	8001d58 <UART_SetConfig+0xcc>
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d014      	beq.n	8001d4e <UART_SetConfig+0xc2>
 8001d24:	d818      	bhi.n	8001d58 <UART_SetConfig+0xcc>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <UART_SetConfig+0xa4>
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00a      	beq.n	8001d44 <UART_SetConfig+0xb8>
 8001d2e:	e013      	b.n	8001d58 <UART_SetConfig+0xcc>
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e021      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e01c      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2204      	movs	r2, #4
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e017      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2208      	movs	r2, #8
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e012      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d58:	231f      	movs	r3, #31
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e00d      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <UART_SetConfig+0x278>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d104      	bne.n	8001d76 <UART_SetConfig+0xea>
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e003      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d15d      	bne.n	8001e46 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d015      	beq.n	8001dc0 <UART_SetConfig+0x134>
 8001d94:	dc18      	bgt.n	8001dc8 <UART_SetConfig+0x13c>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00d      	beq.n	8001db6 <UART_SetConfig+0x12a>
 8001d9a:	dc15      	bgt.n	8001dc8 <UART_SetConfig+0x13c>
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <UART_SetConfig+0x11a>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d005      	beq.n	8001db0 <UART_SetConfig+0x124>
 8001da4:	e010      	b.n	8001dc8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001da6:	f7ff fc15 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
        break;
 8001dae:	e012      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001db0:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <UART_SetConfig+0x27c>)
 8001db2:	61bb      	str	r3, [r7, #24]
        break;
 8001db4:	e00f      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001db6:	f7ff fb9d 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
        break;
 8001dbe:	e00a      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	61bb      	str	r3, [r7, #24]
        break;
 8001dc6:	e006      	b.n	8001dd6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001dcc:	231e      	movs	r3, #30
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
        break;
 8001dd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d100      	bne.n	8001dde <UART_SetConfig+0x152>
 8001ddc:	e07b      	b.n	8001ed6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	18d2      	adds	r2, r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0019      	movs	r1, r3
 8001df0:	0010      	movs	r0, r2
 8001df2:	f7fe f993 	bl	800011c <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	d91c      	bls.n	8001e3c <UART_SetConfig+0x1b0>
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d217      	bcs.n	8001e3c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	200e      	movs	r0, #14
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	210f      	movs	r1, #15
 8001e16:	438a      	bics	r2, r1
 8001e18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	b299      	uxth	r1, r3
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	183a      	adds	r2, r7, r0
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	183a      	adds	r2, r7, r0
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e04c      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e3c:	231e      	movs	r3, #30
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e047      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d015      	beq.n	8001e7c <UART_SetConfig+0x1f0>
 8001e50:	dc18      	bgt.n	8001e84 <UART_SetConfig+0x1f8>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00d      	beq.n	8001e72 <UART_SetConfig+0x1e6>
 8001e56:	dc15      	bgt.n	8001e84 <UART_SetConfig+0x1f8>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <UART_SetConfig+0x1d6>
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d005      	beq.n	8001e6c <UART_SetConfig+0x1e0>
 8001e60:	e010      	b.n	8001e84 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e62:	f7ff fbb7 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
        break;
 8001e6a:	e012      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <UART_SetConfig+0x27c>)
 8001e6e:	61bb      	str	r3, [r7, #24]
        break;
 8001e70:	e00f      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e72:	f7ff fb3f 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001e76:	0003      	movs	r3, r0
 8001e78:	61bb      	str	r3, [r7, #24]
        break;
 8001e7a:	e00a      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	61bb      	str	r3, [r7, #24]
        break;
 8001e82:	e006      	b.n	8001e92 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e88:	231e      	movs	r3, #30
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
        break;
 8001e90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01e      	beq.n	8001ed6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	085a      	lsrs	r2, r3, #1
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f7fe f937 	bl	800011c <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	d909      	bls.n	8001ece <UART_SetConfig+0x242>
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d204      	bcs.n	8001ece <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	e003      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001ece:	231e      	movs	r3, #30
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001ee2:	231e      	movs	r3, #30
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	781b      	ldrb	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b008      	add	sp, #32
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	efff69f3 	.word	0xefff69f3
 8001ef4:	ffffcfff 	.word	0xffffcfff
 8001ef8:	fffff4ff 	.word	0xfffff4ff
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40004400 	.word	0x40004400
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a4a      	ldr	r2, [pc, #296]	; (8002050 <UART_AdvFeatureConfig+0x144>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00b      	beq.n	8001f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a43      	ldr	r2, [pc, #268]	; (8002054 <UART_AdvFeatureConfig+0x148>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <UART_AdvFeatureConfig+0x14c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2208      	movs	r2, #8
 8001f80:	4013      	ands	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a34      	ldr	r2, [pc, #208]	; (800205c <UART_AdvFeatureConfig+0x150>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <UART_AdvFeatureConfig+0x154>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a25      	ldr	r2, [pc, #148]	; (8002064 <UART_AdvFeatureConfig+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <UART_AdvFeatureConfig+0x15c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	035b      	lsls	r3, r3, #13
 800200a:	429a      	cmp	r2, r3
 800200c:	d10b      	bne.n	8002026 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <UART_AdvFeatureConfig+0x160>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <UART_AdvFeatureConfig+0x164>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}
 8002050:	fffdffff 	.word	0xfffdffff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	fffbffff 	.word	0xfffbffff
 800205c:	ffff7fff 	.word	0xffff7fff
 8002060:	ffffefff 	.word	0xffffefff
 8002064:	ffffdfff 	.word	0xffffdfff
 8002068:	ffefffff 	.word	0xffefffff
 800206c:	ff9fffff 	.word	0xff9fffff
 8002070:	fff7ffff 	.word	0xfff7ffff

08002074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002084:	f7fe fbb0 	bl	80007e8 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
 8002096:	2b08      	cmp	r3, #8
 8002098:	d10c      	bne.n	80020b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0391      	lsls	r1, r2, #14
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <UART_CheckIdleState+0x8c>)
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f000 f82c 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e021      	b.n	80020f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2204      	movs	r2, #4
 80020bc:	4013      	ands	r3, r2
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d10c      	bne.n	80020dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	03d1      	lsls	r1, r2, #15
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <UART_CheckIdleState+0x8c>)
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f000 f818 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d001      	beq.n	80020dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e00d      	b.n	80020f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2274      	movs	r2, #116	; 0x74
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	01ffffff 	.word	0x01ffffff

08002104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b094      	sub	sp, #80	; 0x50
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	e0a3      	b.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	3301      	adds	r3, #1
 800211a:	d100      	bne.n	800211e <UART_WaitOnFlagUntilTimeout+0x1a>
 800211c:	e09f      	b.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe fb63 	bl	80007e8 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
 800212e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13d      	bne.n	80021b0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002134:	f3ef 8310 	mrs	r3, PRIMASK
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	494c      	ldr	r1, [pc, #304]	; (8002288 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002156:	400a      	ands	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	f383 8810 	msr	PRIMASK, r3
}
 8002164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002166:	f3ef 8310 	mrs	r3, PRIMASK
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
 8002170:	2301      	movs	r3, #1
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2274      	movs	r2, #116	; 0x74
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e067      	b.n	8002280 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d050      	beq.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	401a      	ands	r2, r3
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d146      	bne.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8310 	mrs	r3, PRIMASK
 80021de:	613b      	str	r3, [r7, #16]
  return(result);
 80021e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	2301      	movs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f383 8810 	msr	PRIMASK, r3
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4923      	ldr	r1, [pc, #140]	; (8002288 <UART_WaitOnFlagUntilTimeout+0x184>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220c:	f3ef 8310 	mrs	r3, PRIMASK
 8002210:	61fb      	str	r3, [r7, #28]
  return(result);
 8002212:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f383 8810 	msr	PRIMASK, r3
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f383 8810 	msr	PRIMASK, r3
}
 800223c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	2120      	movs	r1, #32
 8002250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2274      	movs	r2, #116	; 0x74
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e010      	b.n	8002280 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	425a      	negs	r2, r3
 800226e:	4153      	adcs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	001a      	movs	r2, r3
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d100      	bne.n	800227e <UART_WaitOnFlagUntilTimeout+0x17a>
 800227c:	e74b      	b.n	8002116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b014      	add	sp, #80	; 0x50
 8002286:	bd80      	pop	{r7, pc}
 8002288:	fffffe5f 	.word	0xfffffe5f

0800228c <__errno>:
 800228c:	4b01      	ldr	r3, [pc, #4]	; (8002294 <__errno+0x8>)
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	4770      	bx	lr
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	2000000c 	.word	0x2000000c

08002298 <__libc_init_array>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	2600      	movs	r6, #0
 800229c:	4d0c      	ldr	r5, [pc, #48]	; (80022d0 <__libc_init_array+0x38>)
 800229e:	4c0d      	ldr	r4, [pc, #52]	; (80022d4 <__libc_init_array+0x3c>)
 80022a0:	1b64      	subs	r4, r4, r5
 80022a2:	10a4      	asrs	r4, r4, #2
 80022a4:	42a6      	cmp	r6, r4
 80022a6:	d109      	bne.n	80022bc <__libc_init_array+0x24>
 80022a8:	2600      	movs	r6, #0
 80022aa:	f000 fc8b 	bl	8002bc4 <_init>
 80022ae:	4d0a      	ldr	r5, [pc, #40]	; (80022d8 <__libc_init_array+0x40>)
 80022b0:	4c0a      	ldr	r4, [pc, #40]	; (80022dc <__libc_init_array+0x44>)
 80022b2:	1b64      	subs	r4, r4, r5
 80022b4:	10a4      	asrs	r4, r4, #2
 80022b6:	42a6      	cmp	r6, r4
 80022b8:	d105      	bne.n	80022c6 <__libc_init_array+0x2e>
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
 80022bc:	00b3      	lsls	r3, r6, #2
 80022be:	58eb      	ldr	r3, [r5, r3]
 80022c0:	4798      	blx	r3
 80022c2:	3601      	adds	r6, #1
 80022c4:	e7ee      	b.n	80022a4 <__libc_init_array+0xc>
 80022c6:	00b3      	lsls	r3, r6, #2
 80022c8:	58eb      	ldr	r3, [r5, r3]
 80022ca:	4798      	blx	r3
 80022cc:	3601      	adds	r6, #1
 80022ce:	e7f2      	b.n	80022b6 <__libc_init_array+0x1e>
 80022d0:	08002cdc 	.word	0x08002cdc
 80022d4:	08002cdc 	.word	0x08002cdc
 80022d8:	08002cdc 	.word	0x08002cdc
 80022dc:	08002ce0 	.word	0x08002ce0

080022e0 <memset>:
 80022e0:	0003      	movs	r3, r0
 80022e2:	1882      	adds	r2, r0, r2
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d100      	bne.n	80022ea <memset+0xa>
 80022e8:	4770      	bx	lr
 80022ea:	7019      	strb	r1, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e7f9      	b.n	80022e4 <memset+0x4>

080022f0 <siprintf>:
 80022f0:	b40e      	push	{r1, r2, r3}
 80022f2:	b500      	push	{lr}
 80022f4:	490b      	ldr	r1, [pc, #44]	; (8002324 <siprintf+0x34>)
 80022f6:	b09c      	sub	sp, #112	; 0x70
 80022f8:	ab1d      	add	r3, sp, #116	; 0x74
 80022fa:	9002      	str	r0, [sp, #8]
 80022fc:	9006      	str	r0, [sp, #24]
 80022fe:	9107      	str	r1, [sp, #28]
 8002300:	9104      	str	r1, [sp, #16]
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <siprintf+0x38>)
 8002304:	4909      	ldr	r1, [pc, #36]	; (800232c <siprintf+0x3c>)
 8002306:	cb04      	ldmia	r3!, {r2}
 8002308:	9105      	str	r1, [sp, #20]
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	a902      	add	r1, sp, #8
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f000 f870 	bl	80023f4 <_svfiprintf_r>
 8002314:	2300      	movs	r3, #0
 8002316:	9a02      	ldr	r2, [sp, #8]
 8002318:	7013      	strb	r3, [r2, #0]
 800231a:	b01c      	add	sp, #112	; 0x70
 800231c:	bc08      	pop	{r3}
 800231e:	b003      	add	sp, #12
 8002320:	4718      	bx	r3
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	7fffffff 	.word	0x7fffffff
 8002328:	2000000c 	.word	0x2000000c
 800232c:	ffff0208 	.word	0xffff0208

08002330 <__ssputs_r>:
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	688e      	ldr	r6, [r1, #8]
 8002334:	b085      	sub	sp, #20
 8002336:	0007      	movs	r7, r0
 8002338:	000c      	movs	r4, r1
 800233a:	9203      	str	r2, [sp, #12]
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	429e      	cmp	r6, r3
 8002340:	d83c      	bhi.n	80023bc <__ssputs_r+0x8c>
 8002342:	2390      	movs	r3, #144	; 0x90
 8002344:	898a      	ldrh	r2, [r1, #12]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	421a      	tst	r2, r3
 800234a:	d034      	beq.n	80023b6 <__ssputs_r+0x86>
 800234c:	6909      	ldr	r1, [r1, #16]
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	6960      	ldr	r0, [r4, #20]
 8002352:	1a5b      	subs	r3, r3, r1
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2303      	movs	r3, #3
 8002358:	4343      	muls	r3, r0
 800235a:	0fdd      	lsrs	r5, r3, #31
 800235c:	18ed      	adds	r5, r5, r3
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	9802      	ldr	r0, [sp, #8]
 8002362:	3301      	adds	r3, #1
 8002364:	181b      	adds	r3, r3, r0
 8002366:	106d      	asrs	r5, r5, #1
 8002368:	42ab      	cmp	r3, r5
 800236a:	d900      	bls.n	800236e <__ssputs_r+0x3e>
 800236c:	001d      	movs	r5, r3
 800236e:	0553      	lsls	r3, r2, #21
 8002370:	d532      	bpl.n	80023d8 <__ssputs_r+0xa8>
 8002372:	0029      	movs	r1, r5
 8002374:	0038      	movs	r0, r7
 8002376:	f000 fb53 	bl	8002a20 <_malloc_r>
 800237a:	1e06      	subs	r6, r0, #0
 800237c:	d109      	bne.n	8002392 <__ssputs_r+0x62>
 800237e:	230c      	movs	r3, #12
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	2001      	movs	r0, #1
 8002386:	89a2      	ldrh	r2, [r4, #12]
 8002388:	4240      	negs	r0, r0
 800238a:	4313      	orrs	r3, r2
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	b005      	add	sp, #20
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002392:	9a02      	ldr	r2, [sp, #8]
 8002394:	6921      	ldr	r1, [r4, #16]
 8002396:	f000 faba 	bl	800290e <memcpy>
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <__ssputs_r+0xc0>)
 800239e:	401a      	ands	r2, r3
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	4313      	orrs	r3, r2
 80023a4:	81a3      	strh	r3, [r4, #12]
 80023a6:	9b02      	ldr	r3, [sp, #8]
 80023a8:	6126      	str	r6, [r4, #16]
 80023aa:	18f6      	adds	r6, r6, r3
 80023ac:	6026      	str	r6, [r4, #0]
 80023ae:	6165      	str	r5, [r4, #20]
 80023b0:	9e01      	ldr	r6, [sp, #4]
 80023b2:	1aed      	subs	r5, r5, r3
 80023b4:	60a5      	str	r5, [r4, #8]
 80023b6:	9b01      	ldr	r3, [sp, #4]
 80023b8:	429e      	cmp	r6, r3
 80023ba:	d900      	bls.n	80023be <__ssputs_r+0x8e>
 80023bc:	9e01      	ldr	r6, [sp, #4]
 80023be:	0032      	movs	r2, r6
 80023c0:	9903      	ldr	r1, [sp, #12]
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f000 faac 	bl	8002920 <memmove>
 80023c8:	68a3      	ldr	r3, [r4, #8]
 80023ca:	2000      	movs	r0, #0
 80023cc:	1b9b      	subs	r3, r3, r6
 80023ce:	60a3      	str	r3, [r4, #8]
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	199e      	adds	r6, r3, r6
 80023d4:	6026      	str	r6, [r4, #0]
 80023d6:	e7da      	b.n	800238e <__ssputs_r+0x5e>
 80023d8:	002a      	movs	r2, r5
 80023da:	0038      	movs	r0, r7
 80023dc:	f000 fb96 	bl	8002b0c <_realloc_r>
 80023e0:	1e06      	subs	r6, r0, #0
 80023e2:	d1e0      	bne.n	80023a6 <__ssputs_r+0x76>
 80023e4:	0038      	movs	r0, r7
 80023e6:	6921      	ldr	r1, [r4, #16]
 80023e8:	f000 faae 	bl	8002948 <_free_r>
 80023ec:	e7c7      	b.n	800237e <__ssputs_r+0x4e>
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	fffffb7f 	.word	0xfffffb7f

080023f4 <_svfiprintf_r>:
 80023f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f6:	b0a1      	sub	sp, #132	; 0x84
 80023f8:	9003      	str	r0, [sp, #12]
 80023fa:	001d      	movs	r5, r3
 80023fc:	898b      	ldrh	r3, [r1, #12]
 80023fe:	000f      	movs	r7, r1
 8002400:	0016      	movs	r6, r2
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	d511      	bpl.n	800242a <_svfiprintf_r+0x36>
 8002406:	690b      	ldr	r3, [r1, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10e      	bne.n	800242a <_svfiprintf_r+0x36>
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	f000 fb07 	bl	8002a20 <_malloc_r>
 8002412:	6038      	str	r0, [r7, #0]
 8002414:	6138      	str	r0, [r7, #16]
 8002416:	2800      	cmp	r0, #0
 8002418:	d105      	bne.n	8002426 <_svfiprintf_r+0x32>
 800241a:	230c      	movs	r3, #12
 800241c:	9a03      	ldr	r2, [sp, #12]
 800241e:	3801      	subs	r0, #1
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	b021      	add	sp, #132	; 0x84
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	2300      	movs	r3, #0
 800242c:	ac08      	add	r4, sp, #32
 800242e:	6163      	str	r3, [r4, #20]
 8002430:	3320      	adds	r3, #32
 8002432:	7663      	strb	r3, [r4, #25]
 8002434:	3310      	adds	r3, #16
 8002436:	76a3      	strb	r3, [r4, #26]
 8002438:	9507      	str	r5, [sp, #28]
 800243a:	0035      	movs	r5, r6
 800243c:	782b      	ldrb	r3, [r5, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <_svfiprintf_r+0x52>
 8002442:	2b25      	cmp	r3, #37	; 0x25
 8002444:	d147      	bne.n	80024d6 <_svfiprintf_r+0xe2>
 8002446:	1bab      	subs	r3, r5, r6
 8002448:	9305      	str	r3, [sp, #20]
 800244a:	42b5      	cmp	r5, r6
 800244c:	d00c      	beq.n	8002468 <_svfiprintf_r+0x74>
 800244e:	0032      	movs	r2, r6
 8002450:	0039      	movs	r1, r7
 8002452:	9803      	ldr	r0, [sp, #12]
 8002454:	f7ff ff6c 	bl	8002330 <__ssputs_r>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d100      	bne.n	800245e <_svfiprintf_r+0x6a>
 800245c:	e0ae      	b.n	80025bc <_svfiprintf_r+0x1c8>
 800245e:	6962      	ldr	r2, [r4, #20]
 8002460:	9b05      	ldr	r3, [sp, #20]
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	6163      	str	r3, [r4, #20]
 8002468:	782b      	ldrb	r3, [r5, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <_svfiprintf_r+0x7c>
 800246e:	e0a5      	b.n	80025bc <_svfiprintf_r+0x1c8>
 8002470:	2201      	movs	r2, #1
 8002472:	2300      	movs	r3, #0
 8002474:	4252      	negs	r2, r2
 8002476:	6062      	str	r2, [r4, #4]
 8002478:	a904      	add	r1, sp, #16
 800247a:	3254      	adds	r2, #84	; 0x54
 800247c:	1852      	adds	r2, r2, r1
 800247e:	1c6e      	adds	r6, r5, #1
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	60e3      	str	r3, [r4, #12]
 8002484:	60a3      	str	r3, [r4, #8]
 8002486:	7013      	strb	r3, [r2, #0]
 8002488:	65a3      	str	r3, [r4, #88]	; 0x58
 800248a:	2205      	movs	r2, #5
 800248c:	7831      	ldrb	r1, [r6, #0]
 800248e:	4854      	ldr	r0, [pc, #336]	; (80025e0 <_svfiprintf_r+0x1ec>)
 8002490:	f000 fa32 	bl	80028f8 <memchr>
 8002494:	1c75      	adds	r5, r6, #1
 8002496:	2800      	cmp	r0, #0
 8002498:	d11f      	bne.n	80024da <_svfiprintf_r+0xe6>
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	06d3      	lsls	r3, r2, #27
 800249e:	d504      	bpl.n	80024aa <_svfiprintf_r+0xb6>
 80024a0:	2353      	movs	r3, #83	; 0x53
 80024a2:	a904      	add	r1, sp, #16
 80024a4:	185b      	adds	r3, r3, r1
 80024a6:	2120      	movs	r1, #32
 80024a8:	7019      	strb	r1, [r3, #0]
 80024aa:	0713      	lsls	r3, r2, #28
 80024ac:	d504      	bpl.n	80024b8 <_svfiprintf_r+0xc4>
 80024ae:	2353      	movs	r3, #83	; 0x53
 80024b0:	a904      	add	r1, sp, #16
 80024b2:	185b      	adds	r3, r3, r1
 80024b4:	212b      	movs	r1, #43	; 0x2b
 80024b6:	7019      	strb	r1, [r3, #0]
 80024b8:	7833      	ldrb	r3, [r6, #0]
 80024ba:	2b2a      	cmp	r3, #42	; 0x2a
 80024bc:	d016      	beq.n	80024ec <_svfiprintf_r+0xf8>
 80024be:	0035      	movs	r5, r6
 80024c0:	2100      	movs	r1, #0
 80024c2:	200a      	movs	r0, #10
 80024c4:	68e3      	ldr	r3, [r4, #12]
 80024c6:	782a      	ldrb	r2, [r5, #0]
 80024c8:	1c6e      	adds	r6, r5, #1
 80024ca:	3a30      	subs	r2, #48	; 0x30
 80024cc:	2a09      	cmp	r2, #9
 80024ce:	d94e      	bls.n	800256e <_svfiprintf_r+0x17a>
 80024d0:	2900      	cmp	r1, #0
 80024d2:	d111      	bne.n	80024f8 <_svfiprintf_r+0x104>
 80024d4:	e017      	b.n	8002506 <_svfiprintf_r+0x112>
 80024d6:	3501      	adds	r5, #1
 80024d8:	e7b0      	b.n	800243c <_svfiprintf_r+0x48>
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <_svfiprintf_r+0x1ec>)
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	1ac0      	subs	r0, r0, r3
 80024e0:	2301      	movs	r3, #1
 80024e2:	4083      	lsls	r3, r0
 80024e4:	4313      	orrs	r3, r2
 80024e6:	002e      	movs	r6, r5
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	e7ce      	b.n	800248a <_svfiprintf_r+0x96>
 80024ec:	9b07      	ldr	r3, [sp, #28]
 80024ee:	1d19      	adds	r1, r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	9107      	str	r1, [sp, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db01      	blt.n	80024fc <_svfiprintf_r+0x108>
 80024f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80024fa:	e004      	b.n	8002506 <_svfiprintf_r+0x112>
 80024fc:	425b      	negs	r3, r3
 80024fe:	60e3      	str	r3, [r4, #12]
 8002500:	2302      	movs	r3, #2
 8002502:	4313      	orrs	r3, r2
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	782b      	ldrb	r3, [r5, #0]
 8002508:	2b2e      	cmp	r3, #46	; 0x2e
 800250a:	d10a      	bne.n	8002522 <_svfiprintf_r+0x12e>
 800250c:	786b      	ldrb	r3, [r5, #1]
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d135      	bne.n	800257e <_svfiprintf_r+0x18a>
 8002512:	9b07      	ldr	r3, [sp, #28]
 8002514:	3502      	adds	r5, #2
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	9207      	str	r2, [sp, #28]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db2b      	blt.n	8002578 <_svfiprintf_r+0x184>
 8002520:	9309      	str	r3, [sp, #36]	; 0x24
 8002522:	4e30      	ldr	r6, [pc, #192]	; (80025e4 <_svfiprintf_r+0x1f0>)
 8002524:	2203      	movs	r2, #3
 8002526:	0030      	movs	r0, r6
 8002528:	7829      	ldrb	r1, [r5, #0]
 800252a:	f000 f9e5 	bl	80028f8 <memchr>
 800252e:	2800      	cmp	r0, #0
 8002530:	d006      	beq.n	8002540 <_svfiprintf_r+0x14c>
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	4083      	lsls	r3, r0
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	3501      	adds	r5, #1
 800253c:	4313      	orrs	r3, r2
 800253e:	6023      	str	r3, [r4, #0]
 8002540:	7829      	ldrb	r1, [r5, #0]
 8002542:	2206      	movs	r2, #6
 8002544:	4828      	ldr	r0, [pc, #160]	; (80025e8 <_svfiprintf_r+0x1f4>)
 8002546:	1c6e      	adds	r6, r5, #1
 8002548:	7621      	strb	r1, [r4, #24]
 800254a:	f000 f9d5 	bl	80028f8 <memchr>
 800254e:	2800      	cmp	r0, #0
 8002550:	d03c      	beq.n	80025cc <_svfiprintf_r+0x1d8>
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <_svfiprintf_r+0x1f8>)
 8002554:	2b00      	cmp	r3, #0
 8002556:	d125      	bne.n	80025a4 <_svfiprintf_r+0x1b0>
 8002558:	2207      	movs	r2, #7
 800255a:	9b07      	ldr	r3, [sp, #28]
 800255c:	3307      	adds	r3, #7
 800255e:	4393      	bics	r3, r2
 8002560:	3308      	adds	r3, #8
 8002562:	9307      	str	r3, [sp, #28]
 8002564:	6963      	ldr	r3, [r4, #20]
 8002566:	9a04      	ldr	r2, [sp, #16]
 8002568:	189b      	adds	r3, r3, r2
 800256a:	6163      	str	r3, [r4, #20]
 800256c:	e765      	b.n	800243a <_svfiprintf_r+0x46>
 800256e:	4343      	muls	r3, r0
 8002570:	0035      	movs	r5, r6
 8002572:	2101      	movs	r1, #1
 8002574:	189b      	adds	r3, r3, r2
 8002576:	e7a6      	b.n	80024c6 <_svfiprintf_r+0xd2>
 8002578:	2301      	movs	r3, #1
 800257a:	425b      	negs	r3, r3
 800257c:	e7d0      	b.n	8002520 <_svfiprintf_r+0x12c>
 800257e:	2300      	movs	r3, #0
 8002580:	200a      	movs	r0, #10
 8002582:	001a      	movs	r2, r3
 8002584:	3501      	adds	r5, #1
 8002586:	6063      	str	r3, [r4, #4]
 8002588:	7829      	ldrb	r1, [r5, #0]
 800258a:	1c6e      	adds	r6, r5, #1
 800258c:	3930      	subs	r1, #48	; 0x30
 800258e:	2909      	cmp	r1, #9
 8002590:	d903      	bls.n	800259a <_svfiprintf_r+0x1a6>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0c5      	beq.n	8002522 <_svfiprintf_r+0x12e>
 8002596:	9209      	str	r2, [sp, #36]	; 0x24
 8002598:	e7c3      	b.n	8002522 <_svfiprintf_r+0x12e>
 800259a:	4342      	muls	r2, r0
 800259c:	0035      	movs	r5, r6
 800259e:	2301      	movs	r3, #1
 80025a0:	1852      	adds	r2, r2, r1
 80025a2:	e7f1      	b.n	8002588 <_svfiprintf_r+0x194>
 80025a4:	ab07      	add	r3, sp, #28
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	003a      	movs	r2, r7
 80025aa:	0021      	movs	r1, r4
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_svfiprintf_r+0x1fc>)
 80025ae:	9803      	ldr	r0, [sp, #12]
 80025b0:	e000      	b.n	80025b4 <_svfiprintf_r+0x1c0>
 80025b2:	bf00      	nop
 80025b4:	9004      	str	r0, [sp, #16]
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	3301      	adds	r3, #1
 80025ba:	d1d3      	bne.n	8002564 <_svfiprintf_r+0x170>
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80025c0:	065b      	lsls	r3, r3, #25
 80025c2:	d400      	bmi.n	80025c6 <_svfiprintf_r+0x1d2>
 80025c4:	e72d      	b.n	8002422 <_svfiprintf_r+0x2e>
 80025c6:	2001      	movs	r0, #1
 80025c8:	4240      	negs	r0, r0
 80025ca:	e72a      	b.n	8002422 <_svfiprintf_r+0x2e>
 80025cc:	ab07      	add	r3, sp, #28
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	003a      	movs	r2, r7
 80025d2:	0021      	movs	r1, r4
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <_svfiprintf_r+0x1fc>)
 80025d6:	9803      	ldr	r0, [sp, #12]
 80025d8:	f000 f87c 	bl	80026d4 <_printf_i>
 80025dc:	e7ea      	b.n	80025b4 <_svfiprintf_r+0x1c0>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	08002ca8 	.word	0x08002ca8
 80025e4:	08002cae 	.word	0x08002cae
 80025e8:	08002cb2 	.word	0x08002cb2
 80025ec:	00000000 	.word	0x00000000
 80025f0:	08002331 	.word	0x08002331

080025f4 <_printf_common>:
 80025f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025f6:	0015      	movs	r5, r2
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	688a      	ldr	r2, [r1, #8]
 80025fc:	690b      	ldr	r3, [r1, #16]
 80025fe:	000c      	movs	r4, r1
 8002600:	9000      	str	r0, [sp, #0]
 8002602:	4293      	cmp	r3, r2
 8002604:	da00      	bge.n	8002608 <_printf_common+0x14>
 8002606:	0013      	movs	r3, r2
 8002608:	0022      	movs	r2, r4
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	3243      	adds	r2, #67	; 0x43
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	2a00      	cmp	r2, #0
 8002612:	d001      	beq.n	8002618 <_printf_common+0x24>
 8002614:	3301      	adds	r3, #1
 8002616:	602b      	str	r3, [r5, #0]
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	d502      	bpl.n	8002624 <_printf_common+0x30>
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	3302      	adds	r3, #2
 8002622:	602b      	str	r3, [r5, #0]
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	2306      	movs	r3, #6
 8002628:	0017      	movs	r7, r2
 800262a:	401f      	ands	r7, r3
 800262c:	421a      	tst	r2, r3
 800262e:	d027      	beq.n	8002680 <_printf_common+0x8c>
 8002630:	0023      	movs	r3, r4
 8002632:	3343      	adds	r3, #67	; 0x43
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	4193      	sbcs	r3, r2
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	0692      	lsls	r2, r2, #26
 800263e:	d430      	bmi.n	80026a2 <_printf_common+0xae>
 8002640:	0022      	movs	r2, r4
 8002642:	9901      	ldr	r1, [sp, #4]
 8002644:	9800      	ldr	r0, [sp, #0]
 8002646:	9e08      	ldr	r6, [sp, #32]
 8002648:	3243      	adds	r2, #67	; 0x43
 800264a:	47b0      	blx	r6
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	d025      	beq.n	800269c <_printf_common+0xa8>
 8002650:	2306      	movs	r3, #6
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	682a      	ldr	r2, [r5, #0]
 8002656:	68e1      	ldr	r1, [r4, #12]
 8002658:	2500      	movs	r5, #0
 800265a:	4003      	ands	r3, r0
 800265c:	2b04      	cmp	r3, #4
 800265e:	d103      	bne.n	8002668 <_printf_common+0x74>
 8002660:	1a8d      	subs	r5, r1, r2
 8002662:	43eb      	mvns	r3, r5
 8002664:	17db      	asrs	r3, r3, #31
 8002666:	401d      	ands	r5, r3
 8002668:	68a3      	ldr	r3, [r4, #8]
 800266a:	6922      	ldr	r2, [r4, #16]
 800266c:	4293      	cmp	r3, r2
 800266e:	dd01      	ble.n	8002674 <_printf_common+0x80>
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	18ed      	adds	r5, r5, r3
 8002674:	2700      	movs	r7, #0
 8002676:	42bd      	cmp	r5, r7
 8002678:	d120      	bne.n	80026bc <_printf_common+0xc8>
 800267a:	2000      	movs	r0, #0
 800267c:	e010      	b.n	80026a0 <_printf_common+0xac>
 800267e:	3701      	adds	r7, #1
 8002680:	68e3      	ldr	r3, [r4, #12]
 8002682:	682a      	ldr	r2, [r5, #0]
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	42bb      	cmp	r3, r7
 8002688:	ddd2      	ble.n	8002630 <_printf_common+0x3c>
 800268a:	0022      	movs	r2, r4
 800268c:	2301      	movs	r3, #1
 800268e:	9901      	ldr	r1, [sp, #4]
 8002690:	9800      	ldr	r0, [sp, #0]
 8002692:	9e08      	ldr	r6, [sp, #32]
 8002694:	3219      	adds	r2, #25
 8002696:	47b0      	blx	r6
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d1f0      	bne.n	800267e <_printf_common+0x8a>
 800269c:	2001      	movs	r0, #1
 800269e:	4240      	negs	r0, r0
 80026a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026a2:	2030      	movs	r0, #48	; 0x30
 80026a4:	18e1      	adds	r1, r4, r3
 80026a6:	3143      	adds	r1, #67	; 0x43
 80026a8:	7008      	strb	r0, [r1, #0]
 80026aa:	0021      	movs	r1, r4
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	3145      	adds	r1, #69	; 0x45
 80026b0:	7809      	ldrb	r1, [r1, #0]
 80026b2:	18a2      	adds	r2, r4, r2
 80026b4:	3243      	adds	r2, #67	; 0x43
 80026b6:	3302      	adds	r3, #2
 80026b8:	7011      	strb	r1, [r2, #0]
 80026ba:	e7c1      	b.n	8002640 <_printf_common+0x4c>
 80026bc:	0022      	movs	r2, r4
 80026be:	2301      	movs	r3, #1
 80026c0:	9901      	ldr	r1, [sp, #4]
 80026c2:	9800      	ldr	r0, [sp, #0]
 80026c4:	9e08      	ldr	r6, [sp, #32]
 80026c6:	321a      	adds	r2, #26
 80026c8:	47b0      	blx	r6
 80026ca:	1c43      	adds	r3, r0, #1
 80026cc:	d0e6      	beq.n	800269c <_printf_common+0xa8>
 80026ce:	3701      	adds	r7, #1
 80026d0:	e7d1      	b.n	8002676 <_printf_common+0x82>
	...

080026d4 <_printf_i>:
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	9206      	str	r2, [sp, #24]
 80026da:	000a      	movs	r2, r1
 80026dc:	3243      	adds	r2, #67	; 0x43
 80026de:	9307      	str	r3, [sp, #28]
 80026e0:	9005      	str	r0, [sp, #20]
 80026e2:	9204      	str	r2, [sp, #16]
 80026e4:	7e0a      	ldrb	r2, [r1, #24]
 80026e6:	000c      	movs	r4, r1
 80026e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026ea:	2a78      	cmp	r2, #120	; 0x78
 80026ec:	d807      	bhi.n	80026fe <_printf_i+0x2a>
 80026ee:	2a62      	cmp	r2, #98	; 0x62
 80026f0:	d809      	bhi.n	8002706 <_printf_i+0x32>
 80026f2:	2a00      	cmp	r2, #0
 80026f4:	d100      	bne.n	80026f8 <_printf_i+0x24>
 80026f6:	e0c1      	b.n	800287c <_printf_i+0x1a8>
 80026f8:	2a58      	cmp	r2, #88	; 0x58
 80026fa:	d100      	bne.n	80026fe <_printf_i+0x2a>
 80026fc:	e08c      	b.n	8002818 <_printf_i+0x144>
 80026fe:	0026      	movs	r6, r4
 8002700:	3642      	adds	r6, #66	; 0x42
 8002702:	7032      	strb	r2, [r6, #0]
 8002704:	e022      	b.n	800274c <_printf_i+0x78>
 8002706:	0010      	movs	r0, r2
 8002708:	3863      	subs	r0, #99	; 0x63
 800270a:	2815      	cmp	r0, #21
 800270c:	d8f7      	bhi.n	80026fe <_printf_i+0x2a>
 800270e:	f7fd fcfb 	bl	8000108 <__gnu_thumb1_case_shi>
 8002712:	0016      	.short	0x0016
 8002714:	fff6001f 	.word	0xfff6001f
 8002718:	fff6fff6 	.word	0xfff6fff6
 800271c:	001ffff6 	.word	0x001ffff6
 8002720:	fff6fff6 	.word	0xfff6fff6
 8002724:	fff6fff6 	.word	0xfff6fff6
 8002728:	003600a8 	.word	0x003600a8
 800272c:	fff6009a 	.word	0xfff6009a
 8002730:	00b9fff6 	.word	0x00b9fff6
 8002734:	0036fff6 	.word	0x0036fff6
 8002738:	fff6fff6 	.word	0xfff6fff6
 800273c:	009e      	.short	0x009e
 800273e:	0026      	movs	r6, r4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	3642      	adds	r6, #66	; 0x42
 8002744:	1d11      	adds	r1, r2, #4
 8002746:	6019      	str	r1, [r3, #0]
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	7033      	strb	r3, [r6, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	e0a7      	b.n	80028a0 <_printf_i+0x1cc>
 8002750:	6808      	ldr	r0, [r1, #0]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	1d0a      	adds	r2, r1, #4
 8002756:	0605      	lsls	r5, r0, #24
 8002758:	d50b      	bpl.n	8002772 <_printf_i+0x9e>
 800275a:	680d      	ldr	r5, [r1, #0]
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	2d00      	cmp	r5, #0
 8002760:	da03      	bge.n	800276a <_printf_i+0x96>
 8002762:	232d      	movs	r3, #45	; 0x2d
 8002764:	9a04      	ldr	r2, [sp, #16]
 8002766:	426d      	negs	r5, r5
 8002768:	7013      	strb	r3, [r2, #0]
 800276a:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <_printf_i+0x21c>)
 800276c:	270a      	movs	r7, #10
 800276e:	9303      	str	r3, [sp, #12]
 8002770:	e01b      	b.n	80027aa <_printf_i+0xd6>
 8002772:	680d      	ldr	r5, [r1, #0]
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	0641      	lsls	r1, r0, #25
 8002778:	d5f1      	bpl.n	800275e <_printf_i+0x8a>
 800277a:	b22d      	sxth	r5, r5
 800277c:	e7ef      	b.n	800275e <_printf_i+0x8a>
 800277e:	680d      	ldr	r5, [r1, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	1d08      	adds	r0, r1, #4
 8002784:	6018      	str	r0, [r3, #0]
 8002786:	062e      	lsls	r6, r5, #24
 8002788:	d501      	bpl.n	800278e <_printf_i+0xba>
 800278a:	680d      	ldr	r5, [r1, #0]
 800278c:	e003      	b.n	8002796 <_printf_i+0xc2>
 800278e:	066d      	lsls	r5, r5, #25
 8002790:	d5fb      	bpl.n	800278a <_printf_i+0xb6>
 8002792:	680d      	ldr	r5, [r1, #0]
 8002794:	b2ad      	uxth	r5, r5
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <_printf_i+0x21c>)
 8002798:	2708      	movs	r7, #8
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	2a6f      	cmp	r2, #111	; 0x6f
 800279e:	d000      	beq.n	80027a2 <_printf_i+0xce>
 80027a0:	3702      	adds	r7, #2
 80027a2:	0023      	movs	r3, r4
 80027a4:	2200      	movs	r2, #0
 80027a6:	3343      	adds	r3, #67	; 0x43
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	60a3      	str	r3, [r4, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db03      	blt.n	80027ba <_printf_i+0xe6>
 80027b2:	2204      	movs	r2, #4
 80027b4:	6821      	ldr	r1, [r4, #0]
 80027b6:	4391      	bics	r1, r2
 80027b8:	6021      	str	r1, [r4, #0]
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	d102      	bne.n	80027c4 <_printf_i+0xf0>
 80027be:	9e04      	ldr	r6, [sp, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <_printf_i+0x10a>
 80027c4:	9e04      	ldr	r6, [sp, #16]
 80027c6:	0028      	movs	r0, r5
 80027c8:	0039      	movs	r1, r7
 80027ca:	f7fd fd2d 	bl	8000228 <__aeabi_uidivmod>
 80027ce:	9b03      	ldr	r3, [sp, #12]
 80027d0:	3e01      	subs	r6, #1
 80027d2:	5c5b      	ldrb	r3, [r3, r1]
 80027d4:	7033      	strb	r3, [r6, #0]
 80027d6:	002b      	movs	r3, r5
 80027d8:	0005      	movs	r5, r0
 80027da:	429f      	cmp	r7, r3
 80027dc:	d9f3      	bls.n	80027c6 <_printf_i+0xf2>
 80027de:	2f08      	cmp	r7, #8
 80027e0:	d109      	bne.n	80027f6 <_printf_i+0x122>
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	07db      	lsls	r3, r3, #31
 80027e6:	d506      	bpl.n	80027f6 <_printf_i+0x122>
 80027e8:	6863      	ldr	r3, [r4, #4]
 80027ea:	6922      	ldr	r2, [r4, #16]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	dc02      	bgt.n	80027f6 <_printf_i+0x122>
 80027f0:	2330      	movs	r3, #48	; 0x30
 80027f2:	3e01      	subs	r6, #1
 80027f4:	7033      	strb	r3, [r6, #0]
 80027f6:	9b04      	ldr	r3, [sp, #16]
 80027f8:	1b9b      	subs	r3, r3, r6
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	9b07      	ldr	r3, [sp, #28]
 80027fe:	0021      	movs	r1, r4
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	9805      	ldr	r0, [sp, #20]
 8002804:	9b06      	ldr	r3, [sp, #24]
 8002806:	aa09      	add	r2, sp, #36	; 0x24
 8002808:	f7ff fef4 	bl	80025f4 <_printf_common>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d14c      	bne.n	80028aa <_printf_i+0x1d6>
 8002810:	2001      	movs	r0, #1
 8002812:	4240      	negs	r0, r0
 8002814:	b00b      	add	sp, #44	; 0x2c
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002818:	3145      	adds	r1, #69	; 0x45
 800281a:	700a      	strb	r2, [r1, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <_printf_i+0x21c>)
 800281e:	9203      	str	r2, [sp, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	6821      	ldr	r1, [r4, #0]
 8002824:	ca20      	ldmia	r2!, {r5}
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	0608      	lsls	r0, r1, #24
 800282a:	d516      	bpl.n	800285a <_printf_i+0x186>
 800282c:	07cb      	lsls	r3, r1, #31
 800282e:	d502      	bpl.n	8002836 <_printf_i+0x162>
 8002830:	2320      	movs	r3, #32
 8002832:	4319      	orrs	r1, r3
 8002834:	6021      	str	r1, [r4, #0]
 8002836:	2710      	movs	r7, #16
 8002838:	2d00      	cmp	r5, #0
 800283a:	d1b2      	bne.n	80027a2 <_printf_i+0xce>
 800283c:	2320      	movs	r3, #32
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	439a      	bics	r2, r3
 8002842:	6022      	str	r2, [r4, #0]
 8002844:	e7ad      	b.n	80027a2 <_printf_i+0xce>
 8002846:	2220      	movs	r2, #32
 8002848:	6809      	ldr	r1, [r1, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	6022      	str	r2, [r4, #0]
 800284e:	0022      	movs	r2, r4
 8002850:	2178      	movs	r1, #120	; 0x78
 8002852:	3245      	adds	r2, #69	; 0x45
 8002854:	7011      	strb	r1, [r2, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <_printf_i+0x220>)
 8002858:	e7e1      	b.n	800281e <_printf_i+0x14a>
 800285a:	0648      	lsls	r0, r1, #25
 800285c:	d5e6      	bpl.n	800282c <_printf_i+0x158>
 800285e:	b2ad      	uxth	r5, r5
 8002860:	e7e4      	b.n	800282c <_printf_i+0x158>
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	680d      	ldr	r5, [r1, #0]
 8002866:	1d10      	adds	r0, r2, #4
 8002868:	6949      	ldr	r1, [r1, #20]
 800286a:	6018      	str	r0, [r3, #0]
 800286c:	6813      	ldr	r3, [r2, #0]
 800286e:	062e      	lsls	r6, r5, #24
 8002870:	d501      	bpl.n	8002876 <_printf_i+0x1a2>
 8002872:	6019      	str	r1, [r3, #0]
 8002874:	e002      	b.n	800287c <_printf_i+0x1a8>
 8002876:	066d      	lsls	r5, r5, #25
 8002878:	d5fb      	bpl.n	8002872 <_printf_i+0x19e>
 800287a:	8019      	strh	r1, [r3, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	9e04      	ldr	r6, [sp, #16]
 8002880:	6123      	str	r3, [r4, #16]
 8002882:	e7bb      	b.n	80027fc <_printf_i+0x128>
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	1d11      	adds	r1, r2, #4
 8002888:	6019      	str	r1, [r3, #0]
 800288a:	6816      	ldr	r6, [r2, #0]
 800288c:	2100      	movs	r1, #0
 800288e:	0030      	movs	r0, r6
 8002890:	6862      	ldr	r2, [r4, #4]
 8002892:	f000 f831 	bl	80028f8 <memchr>
 8002896:	2800      	cmp	r0, #0
 8002898:	d001      	beq.n	800289e <_printf_i+0x1ca>
 800289a:	1b80      	subs	r0, r0, r6
 800289c:	6060      	str	r0, [r4, #4]
 800289e:	6863      	ldr	r3, [r4, #4]
 80028a0:	6123      	str	r3, [r4, #16]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9a04      	ldr	r2, [sp, #16]
 80028a6:	7013      	strb	r3, [r2, #0]
 80028a8:	e7a8      	b.n	80027fc <_printf_i+0x128>
 80028aa:	6923      	ldr	r3, [r4, #16]
 80028ac:	0032      	movs	r2, r6
 80028ae:	9906      	ldr	r1, [sp, #24]
 80028b0:	9805      	ldr	r0, [sp, #20]
 80028b2:	9d07      	ldr	r5, [sp, #28]
 80028b4:	47a8      	blx	r5
 80028b6:	1c43      	adds	r3, r0, #1
 80028b8:	d0aa      	beq.n	8002810 <_printf_i+0x13c>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	079b      	lsls	r3, r3, #30
 80028be:	d415      	bmi.n	80028ec <_printf_i+0x218>
 80028c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c2:	68e0      	ldr	r0, [r4, #12]
 80028c4:	4298      	cmp	r0, r3
 80028c6:	daa5      	bge.n	8002814 <_printf_i+0x140>
 80028c8:	0018      	movs	r0, r3
 80028ca:	e7a3      	b.n	8002814 <_printf_i+0x140>
 80028cc:	0022      	movs	r2, r4
 80028ce:	2301      	movs	r3, #1
 80028d0:	9906      	ldr	r1, [sp, #24]
 80028d2:	9805      	ldr	r0, [sp, #20]
 80028d4:	9e07      	ldr	r6, [sp, #28]
 80028d6:	3219      	adds	r2, #25
 80028d8:	47b0      	blx	r6
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	d098      	beq.n	8002810 <_printf_i+0x13c>
 80028de:	3501      	adds	r5, #1
 80028e0:	68e3      	ldr	r3, [r4, #12]
 80028e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	42ab      	cmp	r3, r5
 80028e8:	dcf0      	bgt.n	80028cc <_printf_i+0x1f8>
 80028ea:	e7e9      	b.n	80028c0 <_printf_i+0x1ec>
 80028ec:	2500      	movs	r5, #0
 80028ee:	e7f7      	b.n	80028e0 <_printf_i+0x20c>
 80028f0:	08002cb9 	.word	0x08002cb9
 80028f4:	08002cca 	.word	0x08002cca

080028f8 <memchr>:
 80028f8:	b2c9      	uxtb	r1, r1
 80028fa:	1882      	adds	r2, r0, r2
 80028fc:	4290      	cmp	r0, r2
 80028fe:	d101      	bne.n	8002904 <memchr+0xc>
 8002900:	2000      	movs	r0, #0
 8002902:	4770      	bx	lr
 8002904:	7803      	ldrb	r3, [r0, #0]
 8002906:	428b      	cmp	r3, r1
 8002908:	d0fb      	beq.n	8002902 <memchr+0xa>
 800290a:	3001      	adds	r0, #1
 800290c:	e7f6      	b.n	80028fc <memchr+0x4>

0800290e <memcpy>:
 800290e:	2300      	movs	r3, #0
 8002910:	b510      	push	{r4, lr}
 8002912:	429a      	cmp	r2, r3
 8002914:	d100      	bne.n	8002918 <memcpy+0xa>
 8002916:	bd10      	pop	{r4, pc}
 8002918:	5ccc      	ldrb	r4, [r1, r3]
 800291a:	54c4      	strb	r4, [r0, r3]
 800291c:	3301      	adds	r3, #1
 800291e:	e7f8      	b.n	8002912 <memcpy+0x4>

08002920 <memmove>:
 8002920:	b510      	push	{r4, lr}
 8002922:	4288      	cmp	r0, r1
 8002924:	d902      	bls.n	800292c <memmove+0xc>
 8002926:	188b      	adds	r3, r1, r2
 8002928:	4298      	cmp	r0, r3
 800292a:	d303      	bcc.n	8002934 <memmove+0x14>
 800292c:	2300      	movs	r3, #0
 800292e:	e007      	b.n	8002940 <memmove+0x20>
 8002930:	5c8b      	ldrb	r3, [r1, r2]
 8002932:	5483      	strb	r3, [r0, r2]
 8002934:	3a01      	subs	r2, #1
 8002936:	d2fb      	bcs.n	8002930 <memmove+0x10>
 8002938:	bd10      	pop	{r4, pc}
 800293a:	5ccc      	ldrb	r4, [r1, r3]
 800293c:	54c4      	strb	r4, [r0, r3]
 800293e:	3301      	adds	r3, #1
 8002940:	429a      	cmp	r2, r3
 8002942:	d1fa      	bne.n	800293a <memmove+0x1a>
 8002944:	e7f8      	b.n	8002938 <memmove+0x18>
	...

08002948 <_free_r>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	0005      	movs	r5, r0
 800294c:	2900      	cmp	r1, #0
 800294e:	d010      	beq.n	8002972 <_free_r+0x2a>
 8002950:	1f0c      	subs	r4, r1, #4
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da00      	bge.n	800295a <_free_r+0x12>
 8002958:	18e4      	adds	r4, r4, r3
 800295a:	0028      	movs	r0, r5
 800295c:	f000 f918 	bl	8002b90 <__malloc_lock>
 8002960:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <_free_r+0x90>)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <_free_r+0x2c>
 8002968:	6063      	str	r3, [r4, #4]
 800296a:	6014      	str	r4, [r2, #0]
 800296c:	0028      	movs	r0, r5
 800296e:	f000 f917 	bl	8002ba0 <__malloc_unlock>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	42a3      	cmp	r3, r4
 8002976:	d908      	bls.n	800298a <_free_r+0x42>
 8002978:	6821      	ldr	r1, [r4, #0]
 800297a:	1860      	adds	r0, r4, r1
 800297c:	4283      	cmp	r3, r0
 800297e:	d1f3      	bne.n	8002968 <_free_r+0x20>
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	1841      	adds	r1, r0, r1
 8002986:	6021      	str	r1, [r4, #0]
 8002988:	e7ee      	b.n	8002968 <_free_r+0x20>
 800298a:	001a      	movs	r2, r3
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <_free_r+0x4e>
 8002992:	42a3      	cmp	r3, r4
 8002994:	d9f9      	bls.n	800298a <_free_r+0x42>
 8002996:	6811      	ldr	r1, [r2, #0]
 8002998:	1850      	adds	r0, r2, r1
 800299a:	42a0      	cmp	r0, r4
 800299c:	d10b      	bne.n	80029b6 <_free_r+0x6e>
 800299e:	6820      	ldr	r0, [r4, #0]
 80029a0:	1809      	adds	r1, r1, r0
 80029a2:	1850      	adds	r0, r2, r1
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	4283      	cmp	r3, r0
 80029a8:	d1e0      	bne.n	800296c <_free_r+0x24>
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	1841      	adds	r1, r0, r1
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	6053      	str	r3, [r2, #4]
 80029b4:	e7da      	b.n	800296c <_free_r+0x24>
 80029b6:	42a0      	cmp	r0, r4
 80029b8:	d902      	bls.n	80029c0 <_free_r+0x78>
 80029ba:	230c      	movs	r3, #12
 80029bc:	602b      	str	r3, [r5, #0]
 80029be:	e7d5      	b.n	800296c <_free_r+0x24>
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	1860      	adds	r0, r4, r1
 80029c4:	4283      	cmp	r3, r0
 80029c6:	d103      	bne.n	80029d0 <_free_r+0x88>
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	1841      	adds	r1, r0, r1
 80029ce:	6021      	str	r1, [r4, #0]
 80029d0:	6063      	str	r3, [r4, #4]
 80029d2:	6054      	str	r4, [r2, #4]
 80029d4:	e7ca      	b.n	800296c <_free_r+0x24>
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	2000016c 	.word	0x2000016c

080029dc <sbrk_aligned>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	4e0f      	ldr	r6, [pc, #60]	; (8002a1c <sbrk_aligned+0x40>)
 80029e0:	000d      	movs	r5, r1
 80029e2:	6831      	ldr	r1, [r6, #0]
 80029e4:	0004      	movs	r4, r0
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d102      	bne.n	80029f0 <sbrk_aligned+0x14>
 80029ea:	f000 f8bf 	bl	8002b6c <_sbrk_r>
 80029ee:	6030      	str	r0, [r6, #0]
 80029f0:	0029      	movs	r1, r5
 80029f2:	0020      	movs	r0, r4
 80029f4:	f000 f8ba 	bl	8002b6c <_sbrk_r>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d00a      	beq.n	8002a12 <sbrk_aligned+0x36>
 80029fc:	2303      	movs	r3, #3
 80029fe:	1cc5      	adds	r5, r0, #3
 8002a00:	439d      	bics	r5, r3
 8002a02:	42a8      	cmp	r0, r5
 8002a04:	d007      	beq.n	8002a16 <sbrk_aligned+0x3a>
 8002a06:	1a29      	subs	r1, r5, r0
 8002a08:	0020      	movs	r0, r4
 8002a0a:	f000 f8af 	bl	8002b6c <_sbrk_r>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d101      	bne.n	8002a16 <sbrk_aligned+0x3a>
 8002a12:	2501      	movs	r5, #1
 8002a14:	426d      	negs	r5, r5
 8002a16:	0028      	movs	r0, r5
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000170 	.word	0x20000170

08002a20 <_malloc_r>:
 8002a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a22:	2203      	movs	r2, #3
 8002a24:	1ccb      	adds	r3, r1, #3
 8002a26:	4393      	bics	r3, r2
 8002a28:	3308      	adds	r3, #8
 8002a2a:	0006      	movs	r6, r0
 8002a2c:	001f      	movs	r7, r3
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d232      	bcs.n	8002a98 <_malloc_r+0x78>
 8002a32:	270c      	movs	r7, #12
 8002a34:	42b9      	cmp	r1, r7
 8002a36:	d831      	bhi.n	8002a9c <_malloc_r+0x7c>
 8002a38:	0030      	movs	r0, r6
 8002a3a:	f000 f8a9 	bl	8002b90 <__malloc_lock>
 8002a3e:	4d32      	ldr	r5, [pc, #200]	; (8002b08 <_malloc_r+0xe8>)
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	001c      	movs	r4, r3
 8002a44:	2c00      	cmp	r4, #0
 8002a46:	d12e      	bne.n	8002aa6 <_malloc_r+0x86>
 8002a48:	0039      	movs	r1, r7
 8002a4a:	0030      	movs	r0, r6
 8002a4c:	f7ff ffc6 	bl	80029dc <sbrk_aligned>
 8002a50:	0004      	movs	r4, r0
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	d11e      	bne.n	8002a94 <_malloc_r+0x74>
 8002a56:	682c      	ldr	r4, [r5, #0]
 8002a58:	0025      	movs	r5, r4
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	d14a      	bne.n	8002af4 <_malloc_r+0xd4>
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	0029      	movs	r1, r5
 8002a62:	18e3      	adds	r3, r4, r3
 8002a64:	0030      	movs	r0, r6
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	f000 f880 	bl	8002b6c <_sbrk_r>
 8002a6c:	9b01      	ldr	r3, [sp, #4]
 8002a6e:	4283      	cmp	r3, r0
 8002a70:	d143      	bne.n	8002afa <_malloc_r+0xda>
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	3703      	adds	r7, #3
 8002a76:	1aff      	subs	r7, r7, r3
 8002a78:	2303      	movs	r3, #3
 8002a7a:	439f      	bics	r7, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	2f0c      	cmp	r7, #12
 8002a80:	d200      	bcs.n	8002a84 <_malloc_r+0x64>
 8002a82:	270c      	movs	r7, #12
 8002a84:	0039      	movs	r1, r7
 8002a86:	0030      	movs	r0, r6
 8002a88:	f7ff ffa8 	bl	80029dc <sbrk_aligned>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d034      	beq.n	8002afa <_malloc_r+0xda>
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	19df      	adds	r7, r3, r7
 8002a94:	6027      	str	r7, [r4, #0]
 8002a96:	e013      	b.n	8002ac0 <_malloc_r+0xa0>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dacb      	bge.n	8002a34 <_malloc_r+0x14>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	6033      	str	r3, [r6, #0]
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	1bd1      	subs	r1, r2, r7
 8002aaa:	d420      	bmi.n	8002aee <_malloc_r+0xce>
 8002aac:	290b      	cmp	r1, #11
 8002aae:	d917      	bls.n	8002ae0 <_malloc_r+0xc0>
 8002ab0:	19e2      	adds	r2, r4, r7
 8002ab2:	6027      	str	r7, [r4, #0]
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	d111      	bne.n	8002adc <_malloc_r+0xbc>
 8002ab8:	602a      	str	r2, [r5, #0]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	6053      	str	r3, [r2, #4]
 8002ac0:	0030      	movs	r0, r6
 8002ac2:	0025      	movs	r5, r4
 8002ac4:	f000 f86c 	bl	8002ba0 <__malloc_unlock>
 8002ac8:	2207      	movs	r2, #7
 8002aca:	350b      	adds	r5, #11
 8002acc:	1d23      	adds	r3, r4, #4
 8002ace:	4395      	bics	r5, r2
 8002ad0:	1aea      	subs	r2, r5, r3
 8002ad2:	429d      	cmp	r5, r3
 8002ad4:	d0e5      	beq.n	8002aa2 <_malloc_r+0x82>
 8002ad6:	1b5b      	subs	r3, r3, r5
 8002ad8:	50a3      	str	r3, [r4, r2]
 8002ada:	e7e2      	b.n	8002aa2 <_malloc_r+0x82>
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e7ec      	b.n	8002aba <_malloc_r+0x9a>
 8002ae0:	6862      	ldr	r2, [r4, #4]
 8002ae2:	42a3      	cmp	r3, r4
 8002ae4:	d101      	bne.n	8002aea <_malloc_r+0xca>
 8002ae6:	602a      	str	r2, [r5, #0]
 8002ae8:	e7ea      	b.n	8002ac0 <_malloc_r+0xa0>
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	e7e8      	b.n	8002ac0 <_malloc_r+0xa0>
 8002aee:	0023      	movs	r3, r4
 8002af0:	6864      	ldr	r4, [r4, #4]
 8002af2:	e7a7      	b.n	8002a44 <_malloc_r+0x24>
 8002af4:	002c      	movs	r4, r5
 8002af6:	686d      	ldr	r5, [r5, #4]
 8002af8:	e7af      	b.n	8002a5a <_malloc_r+0x3a>
 8002afa:	230c      	movs	r3, #12
 8002afc:	0030      	movs	r0, r6
 8002afe:	6033      	str	r3, [r6, #0]
 8002b00:	f000 f84e 	bl	8002ba0 <__malloc_unlock>
 8002b04:	e7cd      	b.n	8002aa2 <_malloc_r+0x82>
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	2000016c 	.word	0x2000016c

08002b0c <_realloc_r>:
 8002b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b0e:	0007      	movs	r7, r0
 8002b10:	000e      	movs	r6, r1
 8002b12:	0014      	movs	r4, r2
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d105      	bne.n	8002b24 <_realloc_r+0x18>
 8002b18:	0011      	movs	r1, r2
 8002b1a:	f7ff ff81 	bl	8002a20 <_malloc_r>
 8002b1e:	0005      	movs	r5, r0
 8002b20:	0028      	movs	r0, r5
 8002b22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d103      	bne.n	8002b30 <_realloc_r+0x24>
 8002b28:	f7ff ff0e 	bl	8002948 <_free_r>
 8002b2c:	0025      	movs	r5, r4
 8002b2e:	e7f7      	b.n	8002b20 <_realloc_r+0x14>
 8002b30:	f000 f83e 	bl	8002bb0 <_malloc_usable_size_r>
 8002b34:	9001      	str	r0, [sp, #4]
 8002b36:	4284      	cmp	r4, r0
 8002b38:	d803      	bhi.n	8002b42 <_realloc_r+0x36>
 8002b3a:	0035      	movs	r5, r6
 8002b3c:	0843      	lsrs	r3, r0, #1
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	d3ee      	bcc.n	8002b20 <_realloc_r+0x14>
 8002b42:	0021      	movs	r1, r4
 8002b44:	0038      	movs	r0, r7
 8002b46:	f7ff ff6b 	bl	8002a20 <_malloc_r>
 8002b4a:	1e05      	subs	r5, r0, #0
 8002b4c:	d0e8      	beq.n	8002b20 <_realloc_r+0x14>
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	0022      	movs	r2, r4
 8002b52:	429c      	cmp	r4, r3
 8002b54:	d900      	bls.n	8002b58 <_realloc_r+0x4c>
 8002b56:	001a      	movs	r2, r3
 8002b58:	0031      	movs	r1, r6
 8002b5a:	0028      	movs	r0, r5
 8002b5c:	f7ff fed7 	bl	800290e <memcpy>
 8002b60:	0031      	movs	r1, r6
 8002b62:	0038      	movs	r0, r7
 8002b64:	f7ff fef0 	bl	8002948 <_free_r>
 8002b68:	e7da      	b.n	8002b20 <_realloc_r+0x14>
	...

08002b6c <_sbrk_r>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b570      	push	{r4, r5, r6, lr}
 8002b70:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_sbrk_r+0x20>)
 8002b72:	0004      	movs	r4, r0
 8002b74:	0008      	movs	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fd fd5e 	bl	8000638 <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d103      	bne.n	8002b88 <_sbrk_r+0x1c>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d000      	beq.n	8002b88 <_sbrk_r+0x1c>
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000174 	.word	0x20000174

08002b90 <__malloc_lock>:
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4802      	ldr	r0, [pc, #8]	; (8002b9c <__malloc_lock+0xc>)
 8002b94:	f000 f814 	bl	8002bc0 <__retarget_lock_acquire_recursive>
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20000178 	.word	0x20000178

08002ba0 <__malloc_unlock>:
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	4802      	ldr	r0, [pc, #8]	; (8002bac <__malloc_unlock+0xc>)
 8002ba4:	f000 f80d 	bl	8002bc2 <__retarget_lock_release_recursive>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	20000178 	.word	0x20000178

08002bb0 <_malloc_usable_size_r>:
 8002bb0:	1f0b      	subs	r3, r1, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1f18      	subs	r0, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da01      	bge.n	8002bbe <_malloc_usable_size_r+0xe>
 8002bba:	580b      	ldr	r3, [r1, r0]
 8002bbc:	18c0      	adds	r0, r0, r3
 8002bbe:	4770      	bx	lr

08002bc0 <__retarget_lock_acquire_recursive>:
 8002bc0:	4770      	bx	lr

08002bc2 <__retarget_lock_release_recursive>:
 8002bc2:	4770      	bx	lr

08002bc4 <_init>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr

08002bd0 <_fini>:
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd6:	bc08      	pop	{r3}
 8002bd8:	469e      	mov	lr, r3
 8002bda:	4770      	bx	lr
